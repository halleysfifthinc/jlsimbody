// this file was auto-generated by wrapit v1.3.3
#include "jlsimbody/common.h"

#include "jlsimmath/Timestepper_and_Integrators.h"

namespace jlcxx {
  template<> struct IsMirroredType<SimTK::SemiExplicitEuler2Integrator> : std::false_type { };
  template<> struct DefaultConstructible<SimTK::SemiExplicitEuler2Integrator> : std::false_type { };
  template<> struct SuperType<SimTK::SemiExplicitEuler2Integrator> { typedef SimTK::Integrator type; };
}

namespace jlsimbody {

// Class generating the wrapper for type SimTK::SemiExplicitEuler2Integrator
struct JLSIMBODY_NO_EXPORT JlSimTK_SemiExplicitEuler2Integrator : public Wrapper {

  JlSimTK_SemiExplicitEuler2Integrator(jlcxx::Module& module): Wrapper(module){
    DEBUG_MSG("type SimTK::SemiExplicitEuler2Integrator (" __HERE__ ")");
    // defined in simbody/simmath/SemiExplicitEuler2Integrator.h:89:28
    jlcxx::TypeWrapper<SimTK::SemiExplicitEuler2Integrator>  t = module.add_type<SimTK::SemiExplicitEuler2Integrator>("SemiExplicitEuler2Integrator",
      jlcxx::julia_base_type<SimTK::Integrator>());
    CLEAR_DEBUG_MSG();

    type_ = std::unique_ptr<jlcxx::TypeWrapper<SimTK::SemiExplicitEuler2Integrator>>(new jlcxx::TypeWrapper<SimTK::SemiExplicitEuler2Integrator>(module, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("void SimTK::SemiExplicitEuler2Integrator::SemiExplicitEuler2Integrator(const SimTK::System &) (" __HERE__ ")");
    // defined in simbody/simmath/SemiExplicitEuler2Integrator.h:93:5
    t.constructor<const SimTK::System &>();
    CLEAR_DEBUG_MSG();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<SimTK::SemiExplicitEuler2Integrator>> type_;
};
std::shared_ptr<Wrapper> newJlSimTK_SemiExplicitEuler2Integrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlSimTK_SemiExplicitEuler2Integrator(module));
}

}
