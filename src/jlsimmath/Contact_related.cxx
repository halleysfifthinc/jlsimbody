// this file was auto-generated by wrapit v0.1.0-61-g71d8603-dirty
#include <type_traits>
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlsimmath/Contact_related.h"

#ifdef VERBOSE_IMPORT
#  define DEBUG_MSG(a) std::cerr << a << "\n"
#else
#  define DEBUG_MSG(a)
#endif
#define __HERE__  __FILE__ ":" QUOTE2(__LINE__)
#define QUOTE(arg) #arg
#define QUOTE2(arg) QUOTE(arg)

namespace jlsimbody{

void define_simmath_Contact_related(jlcxx::Module& types, const ArrayWrapper& array_wrapper){

  DEBUG_MSG("Adding wrapper for enum SimTK::Contact::Condition (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:89:10
  types.add_bits<SimTK::Contact::Condition>("SimTK!Contact!Condition", jlcxx::julia_type("CppEnum"));
  types.set_const("SimTK!Contact!Unknown", SimTK::Contact::Unknown);
  types.set_const("SimTK!Contact!Untracked", SimTK::Contact::Untracked);
  types.set_const("SimTK!Contact!Anticipated", SimTK::Contact::Anticipated);
  types.set_const("SimTK!Contact!NewContact", SimTK::Contact::NewContact);
  types.set_const("SimTK!Contact!Ongoing", SimTK::Contact::Ongoing);
  types.set_const("SimTK!Contact!Broken", SimTK::Contact::Broken);

  DEBUG_MSG("Adding wrapper for type SimTK::ContactSurfaceIndex (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  auto t0 = types.add_type<SimTK::ContactSurfaceIndex>("SimTK!ContactSurfaceIndex");
  t0.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  auto t1 = types.add_type<SimTK::ContactId>("SimTK!ContactId");
  t1.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTypeId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  auto t2 = types.add_type<SimTK::ContactTypeId>("SimTK!ContactTypeId");
  t2.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::Contact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:85:28
  auto t3 = types.add_type<SimTK::Contact>("SimTK!Contact");
  t3.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::UntrackedContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:182:28
  auto t5 = types.add_type<SimTK::UntrackedContact>("SimTK!UntrackedContact", jlcxx::julia_base_type<SimTK::Contact>());
  t5.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::BrokenContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:216:28
  auto t6 = types.add_type<SimTK::BrokenContact>("SimTK!BrokenContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::CircularPointContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:260:28
  auto t7 = types.add_type<SimTK::CircularPointContact>("SimTK!CircularPointContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::EllipticalPointContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:355:28
  auto t8 = types.add_type<SimTK::EllipticalPointContact>("SimTK!EllipticalPointContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::BrickHalfSpaceContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:418:28
  auto t9 = types.add_type<SimTK::BrickHalfSpaceContact>("SimTK!BrickHalfSpaceContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::TriangleMeshContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:478:28
  auto t10 = types.add_type<SimTK::TriangleMeshContact>("SimTK!TriangleMeshContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::PointContact (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:542:28
  auto t11 = types.add_type<SimTK::PointContact>("SimTK!PointContact", jlcxx::julia_base_type<SimTK::Contact>());

  DEBUG_MSG("Adding wrapper for type SimTK::Geodesic (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:51:28
  auto t12 = types.add_type<SimTK::Geodesic>("SimTK!Geodesic");
  t12.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::GeodesicDecorator (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:274:7
  auto t13 = types.add_type<SimTK::GeodesicDecorator>("SimTK!GeodesicDecorator");

  DEBUG_MSG("Adding wrapper for type SimTK::GeodesicOptions (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:311:7
  auto t15 = types.add_type<SimTK::GeodesicOptions>("SimTK!GeodesicOptions");
  t15.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometryTypeId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  auto t16 = types.add_type<SimTK::ContactGeometryTypeId>("SimTK!ContactGeometryTypeId");
  t16.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:110:28
  auto t17 = types.add_type<SimTK::ContactGeometry>("SimTK!ContactGeometry");
  t17.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::Plane (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1414:7
  auto t19 = types.add_type<SimTK::Plane>("SimTK!Plane");
  t19.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::HalfSpace (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:826:45
  auto t21 = types.add_type<SimTK::ContactGeometry::HalfSpace>("SimTK!ContactGeometry!HalfSpace", jlcxx::julia_base_type<SimTK::ContactGeometry>());
  t21.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::Cylinder (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:864:45
  auto t22 = types.add_type<SimTK::ContactGeometry::Cylinder>("SimTK!ContactGeometry!Cylinder", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::Sphere (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:895:45
  auto t23 = types.add_type<SimTK::ContactGeometry::Sphere>("SimTK!ContactGeometry!Sphere", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::Ellipsoid (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:945:45
  auto t24 = types.add_type<SimTK::ContactGeometry::Ellipsoid>("SimTK!ContactGeometry!Ellipsoid", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::SmoothHeightMap (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1067:18
  auto t25 = types.add_type<SimTK::ContactGeometry::SmoothHeightMap>("SimTK!ContactGeometry!SmoothHeightMap", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  auto obbtree = types.add_type<SimTK::OBBTree>("SimTK!OBBTree");
  auto obbnode = types.add_type<SimTK::OBBNode>("SimTK!OBBNode");

  DEBUG_MSG("Adding wrapper for type SimTK::BicubicSurface (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/BicubicSurface.h:158:28
  auto t26 = types.add_type<SimTK::BicubicSurface>("SimTK!BicubicSurface");
  t26.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::Brick (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1106:45
  auto t27 = types.add_type<SimTK::ContactGeometry::Brick>("SimTK!ContactGeometry!Brick", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::TriangleMesh (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1163:45
  auto t28 = types.add_type<SimTK::ContactGeometry::TriangleMesh>("SimTK!ContactGeometry!TriangleMesh", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::TriangleMesh::OBBTreeNode (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1343:59
  auto t30 = types.add_type<SimTK::ContactGeometry::TriangleMesh::OBBTreeNode>("SimTK!ContactGeometry!TriangleMesh!OBBTreeNode");

  DEBUG_MSG("Adding wrapper for type SimTK::OrientedBoundingBox (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/OrientedBoundingBox.h:42:28
  auto t31 = types.add_type<SimTK::OrientedBoundingBox>("SimTK!OrientedBoundingBox");
  t31.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactGeometry::Torus (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1377:45
  auto t32 = types.add_type<SimTK::ContactGeometry::Torus>("SimTK!ContactGeometry!Torus", jlcxx::julia_base_type<SimTK::ContactGeometry>());

  DEBUG_MSG("Adding wrapper for type SimTK::GeodHitPlaneEvent (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1442:7
  auto t33 = types.add_type<SimTK::GeodHitPlaneEvent>("SimTK!GeodHitPlaneEvent");
  t33.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::PathDecorator (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1501:7
  auto t34 = types.add_type<SimTK::PathDecorator>("SimTK!PathDecorator");

  DEBUG_MSG("Adding wrapper for type SimTK::PlaneDecorator (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1541:7
  auto t35 = types.add_type<SimTK::PlaneDecorator>("SimTK!PlaneDecorator");

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:62:28
  auto t36 = types.add_type<SimTK::ContactTracker>("SimTK!ContactTracker");

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::HalfSpaceSphere (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:181:44
  auto t38 = types.add_type<SimTK::ContactTracker::HalfSpaceSphere>("SimTK!ContactTracker!HalfSpaceSphere", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t38.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::HalfSpaceEllipsoid (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:205:44
  auto t39 = types.add_type<SimTK::ContactTracker::HalfSpaceEllipsoid>("SimTK!ContactTracker!HalfSpaceEllipsoid", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t39.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::HalfSpaceBrick (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:229:44
  auto t40 = types.add_type<SimTK::ContactTracker::HalfSpaceBrick>("SimTK!ContactTracker!HalfSpaceBrick", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t40.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::SphereSphere (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:253:44
  auto t41 = types.add_type<SimTK::ContactTracker::SphereSphere>("SimTK!ContactTracker!SphereSphere", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t41.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::HalfSpaceTriangleMesh (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:277:44
  auto t42 = types.add_type<SimTK::ContactTracker::HalfSpaceTriangleMesh>("SimTK!ContactTracker!HalfSpaceTriangleMesh", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t42.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::SphereTriangleMesh (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:309:44
  auto t43 = types.add_type<SimTK::ContactTracker::SphereTriangleMesh>("SimTK!ContactTracker!SphereTriangleMesh", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t43.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::TriangleMeshTriangleMesh (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:340:44
  auto t44 = types.add_type<SimTK::ContactTracker::TriangleMeshTriangleMesh>("SimTK!ContactTracker!TriangleMeshTriangleMesh", jlcxx::julia_base_type<SimTK::ContactTracker>());
  t44.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::HalfSpaceConvexImplicit (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:390:44
  auto t45 = types.add_type<SimTK::ContactTracker::HalfSpaceConvexImplicit>("SimTK!ContactTracker!HalfSpaceConvexImplicit", jlcxx::julia_base_type<SimTK::ContactTracker>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::ConvexImplicitPair (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:415:44
  auto t46 = types.add_type<SimTK::ContactTracker::ConvexImplicitPair>("SimTK!ContactTracker!ConvexImplicitPair", jlcxx::julia_base_type<SimTK::ContactTracker>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactTracker::GeneralImplicitPair (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:442:44
  auto t47 = types.add_type<SimTK::ContactTracker::GeneralImplicitPair>("SimTK!ContactTracker!GeneralImplicitPair", jlcxx::julia_base_type<SimTK::ContactTracker>());

  DEBUG_MSG("Adding wrapper for type SimTK::ContactCliqueId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  auto t48 = types.add_type<SimTK::ContactCliqueId>("SimTK!ContactCliqueId");
  t48.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactMaterial (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:89:28
  auto t49 = types.add_type<SimTK::ContactMaterial>("SimTK!ContactMaterial");
  t49.template constructor<>();

  DEBUG_MSG("Adding wrapper for type SimTK::ContactSurface (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:342:28
  auto t50 = types.add_type<SimTK::ContactSurface>("SimTK!ContactSurface");
  t50.template constructor<>();

  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactSurfaceIndex
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<long long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(unsigned int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<unsigned int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(unsigned long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<unsigned long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::ContactSurfaceIndex(unsigned long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:32
  t0.constructor<unsigned long long>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("isValid", static_cast<bool (SimTK::ContactSurfaceIndex::*)()  const>(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValidExtended() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValidExtended()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("isValidExtended", static_cast<bool (SimTK::ContactSurfaceIndex::*)()  const>(&SimTK::ContactSurfaceIndex::isValidExtended));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::invalidate() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactSurfaceIndex::invalidate()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("invalidate", static_cast<void (SimTK::ContactSurfaceIndex::*)() >(&SimTK::ContactSurfaceIndex::invalidate));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurfaceIndex::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactSurfaceIndex::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("clear", static_cast<void (SimTK::ContactSurfaceIndex::*)() >(&SimTK::ContactSurfaceIndex::clear));
  types.set_override_module(jl_base_module);

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(const SimTK::ContactSurfaceIndex &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(const SimTK::ContactSurfaceIndex &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(const SimTK::ContactSurfaceIndex &)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned short)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator==(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator==(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("==", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator!=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator!=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("!=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned short)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned short)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned short)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator>(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator>(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method(">", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(int)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(short)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(long long)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned int)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned short)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long)  const>(&SimTK::ContactSurfaceIndex::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::operator<=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::operator<=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("<=", static_cast<bool (SimTK::ContactSurfaceIndex::*)(unsigned long long)  const>(&SimTK::ContactSurfaceIndex::operator<=));
  types.unset_override_module();

  DEBUG_MSG("Adding wrapper for const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator++() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator++()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("inc!", static_cast<const SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)() >(&SimTK::ContactSurfaceIndex::operator++));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::operator++(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::operator++(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("inc!", static_cast<SimTK::ContactSurfaceIndex (SimTK::ContactSurfaceIndex::*)(int) >(&SimTK::ContactSurfaceIndex::operator++));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator--() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator--()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("dec!", static_cast<const SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)() >(&SimTK::ContactSurfaceIndex::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::operator--(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::operator--(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("dec!", static_cast<SimTK::ContactSurfaceIndex (SimTK::ContactSurfaceIndex::*)(int) >(&SimTK::ContactSurfaceIndex::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::next() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::next()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("next", static_cast<SimTK::ContactSurfaceIndex (SimTK::ContactSurfaceIndex::*)()  const>(&SimTK::ContactSurfaceIndex::next));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::prev() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::ContactSurfaceIndex::prev()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("prev", static_cast<SimTK::ContactSurfaceIndex (SimTK::ContactSurfaceIndex::*)()  const>(&SimTK::ContactSurfaceIndex::prev));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(int) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(int) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(short) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(short) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(long) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(long) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(long long) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(long long) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned int) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned int) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned short) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned short) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned long) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned long) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator+=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("add!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned long long) >(&SimTK::ContactSurfaceIndex::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::operator-=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("sub!", static_cast<SimTK::ContactSurfaceIndex & (SimTK::ContactSurfaceIndex::*)(unsigned long long) >(&SimTK::ContactSurfaceIndex::operator-=));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::Invalid() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactSurfaceIndex & SimTK::ContactSurfaceIndex::Invalid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!Invalid", static_cast<const SimTK::ContactSurfaceIndex & (*)() >(&SimTK::ContactSurfaceIndex::Invalid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(int) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(short) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(long) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(long long) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(unsigned int) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(unsigned short) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(unsigned long) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValid(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValid(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValid", static_cast<bool (*)(unsigned long long) >(&SimTK::ContactSurfaceIndex::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValidExtended(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValidExtended(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValidExtended", static_cast<bool (*)(int) >(&SimTK::ContactSurfaceIndex::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValidExtended(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValidExtended(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValidExtended", static_cast<bool (*)(short) >(&SimTK::ContactSurfaceIndex::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValidExtended(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValidExtended(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValidExtended", static_cast<bool (*)(long) >(&SimTK::ContactSurfaceIndex::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurfaceIndex::isValidExtended(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurfaceIndex::isValidExtended(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!isValidExtended", static_cast<bool (*)(long long) >(&SimTK::ContactSurfaceIndex::isValidExtended));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex::size_type SimTK::ContactSurfaceIndex::max_size() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex::size_type SimTK::ContactSurfaceIndex::max_size()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  t0.method("SimTK!ContactSurfaceIndex!max_size", static_cast<SimTK::ContactSurfaceIndex::size_type (*)() >(&SimTK::ContactSurfaceIndex::max_size));

  /* End of SimTK::ContactSurfaceIndex class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactId
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<long long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(unsigned int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<unsigned int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(unsigned long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<unsigned long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::ContactId(unsigned long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:32
  t1.constructor<unsigned long long>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("isValid", static_cast<bool (SimTK::ContactId::*)()  const>(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValidExtended() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValidExtended()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("isValidExtended", static_cast<bool (SimTK::ContactId::*)()  const>(&SimTK::ContactId::isValidExtended));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::invalidate() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactId::invalidate()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("invalidate", static_cast<void (SimTK::ContactId::*)() >(&SimTK::ContactId::invalidate));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactId::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactId::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("clear", static_cast<void (SimTK::ContactId::*)() >(&SimTK::ContactId::clear));
  types.set_override_module(jl_base_module);

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(const SimTK::ContactId &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(const SimTK::ContactId &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(const SimTK::ContactId &)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(unsigned short)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator==(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator==(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("==", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator!=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator!=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("!=", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(unsigned short)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(unsigned short)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">=", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(unsigned short)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator>(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator>(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method(">", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(int)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(short)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(long)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(long long)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(unsigned int)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(unsigned short)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(unsigned long)  const>(&SimTK::ContactId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::operator<=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::operator<=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("<=", static_cast<bool (SimTK::ContactId::*)(unsigned long long)  const>(&SimTK::ContactId::operator<=));
  types.unset_override_module();

  DEBUG_MSG("Adding wrapper for const SimTK::ContactId & SimTK::ContactId::operator++() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactId & SimTK::ContactId::operator++()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("inc!", static_cast<const SimTK::ContactId & (SimTK::ContactId::*)() >(&SimTK::ContactId::operator++));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::ContactId::operator++(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::ContactId::operator++(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("inc!", static_cast<SimTK::ContactId (SimTK::ContactId::*)(int) >(&SimTK::ContactId::operator++));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactId & SimTK::ContactId::operator--() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactId & SimTK::ContactId::operator--()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("dec!", static_cast<const SimTK::ContactId & (SimTK::ContactId::*)() >(&SimTK::ContactId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::ContactId::operator--(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::ContactId::operator--(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("dec!", static_cast<SimTK::ContactId (SimTK::ContactId::*)(int) >(&SimTK::ContactId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::ContactId::next() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::ContactId::next()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("next", static_cast<SimTK::ContactId (SimTK::ContactId::*)()  const>(&SimTK::ContactId::next));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::ContactId::prev() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::ContactId::prev()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("prev", static_cast<SimTK::ContactId (SimTK::ContactId::*)()  const>(&SimTK::ContactId::prev));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(int) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(int) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(short) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(short) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(long) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(long) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(long long) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(long long) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned int) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned int) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned short) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned short) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned long) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned long) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator+=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator+=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("add!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned long long) >(&SimTK::ContactId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId & SimTK::ContactId::operator-=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId & SimTK::ContactId::operator-=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("sub!", static_cast<SimTK::ContactId & (SimTK::ContactId::*)(unsigned long long) >(&SimTK::ContactId::operator-=));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactId & SimTK::ContactId::Invalid() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactId & SimTK::ContactId::Invalid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!Invalid", static_cast<const SimTK::ContactId & (*)() >(&SimTK::ContactId::Invalid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(int) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(short) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(long) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(long long) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(unsigned int) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(unsigned short) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(unsigned long) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValid(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValid(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValid", static_cast<bool (*)(unsigned long long) >(&SimTK::ContactId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValidExtended(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValidExtended(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValidExtended", static_cast<bool (*)(int) >(&SimTK::ContactId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValidExtended(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValidExtended(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValidExtended", static_cast<bool (*)(short) >(&SimTK::ContactId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValidExtended(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValidExtended(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValidExtended", static_cast<bool (*)(long) >(&SimTK::ContactId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactId::isValidExtended(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactId::isValidExtended(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!isValidExtended", static_cast<bool (*)(long long) >(&SimTK::ContactId::isValidExtended));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId::size_type SimTK::ContactId::max_size() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId::size_type SimTK::ContactId::max_size()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  t1.method("SimTK!ContactId!max_size", static_cast<SimTK::ContactId::size_type (*)() >(&SimTK::ContactId::max_size));

  /* End of SimTK::ContactId class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTypeId
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<long long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(unsigned int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<unsigned int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(unsigned long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<unsigned long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::ContactTypeId(unsigned long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:32
  t2.constructor<unsigned long long>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("isValid", static_cast<bool (SimTK::ContactTypeId::*)()  const>(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValidExtended() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValidExtended()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("isValidExtended", static_cast<bool (SimTK::ContactTypeId::*)()  const>(&SimTK::ContactTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::invalidate() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactTypeId::invalidate()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("invalidate", static_cast<void (SimTK::ContactTypeId::*)() >(&SimTK::ContactTypeId::invalidate));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactTypeId::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactTypeId::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("clear", static_cast<void (SimTK::ContactTypeId::*)() >(&SimTK::ContactTypeId::clear));
  types.set_override_module(jl_base_module);

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(const SimTK::ContactTypeId &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(const SimTK::ContactTypeId &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(const SimTK::ContactTypeId &)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(unsigned short)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator==(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator==(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("==", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator!=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator!=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("!=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(unsigned short)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned short)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(unsigned short)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator>(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator>(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method(">", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(int)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(short)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(long)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(long long)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned int)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned short)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long)  const>(&SimTK::ContactTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::operator<=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::operator<=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("<=", static_cast<bool (SimTK::ContactTypeId::*)(unsigned long long)  const>(&SimTK::ContactTypeId::operator<=));
  types.unset_override_module();

  DEBUG_MSG("Adding wrapper for const SimTK::ContactTypeId & SimTK::ContactTypeId::operator++() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactTypeId & SimTK::ContactTypeId::operator++()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("inc!", static_cast<const SimTK::ContactTypeId & (SimTK::ContactTypeId::*)() >(&SimTK::ContactTypeId::operator++));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::ContactTypeId::operator++(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::ContactTypeId::operator++(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("inc!", static_cast<SimTK::ContactTypeId (SimTK::ContactTypeId::*)(int) >(&SimTK::ContactTypeId::operator++));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactTypeId & SimTK::ContactTypeId::operator--() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactTypeId & SimTK::ContactTypeId::operator--()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("dec!", static_cast<const SimTK::ContactTypeId & (SimTK::ContactTypeId::*)() >(&SimTK::ContactTypeId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::ContactTypeId::operator--(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::ContactTypeId::operator--(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("dec!", static_cast<SimTK::ContactTypeId (SimTK::ContactTypeId::*)(int) >(&SimTK::ContactTypeId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::ContactTypeId::next() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::ContactTypeId::next()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("next", static_cast<SimTK::ContactTypeId (SimTK::ContactTypeId::*)()  const>(&SimTK::ContactTypeId::next));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::ContactTypeId::prev() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::ContactTypeId::prev()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("prev", static_cast<SimTK::ContactTypeId (SimTK::ContactTypeId::*)()  const>(&SimTK::ContactTypeId::prev));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(int) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(int) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(short) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(short) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(long) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(long) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(long long) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(long long) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned int) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned int) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned short) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned short) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned long) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned long) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator+=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("add!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned long long) >(&SimTK::ContactTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId & SimTK::ContactTypeId::operator-=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("sub!", static_cast<SimTK::ContactTypeId & (SimTK::ContactTypeId::*)(unsigned long long) >(&SimTK::ContactTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactTypeId & SimTK::ContactTypeId::Invalid() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactTypeId & SimTK::ContactTypeId::Invalid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!Invalid", static_cast<const SimTK::ContactTypeId & (*)() >(&SimTK::ContactTypeId::Invalid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(int) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(short) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(long) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(long long) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(unsigned int) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(unsigned short) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(unsigned long) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValid(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValid(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValid", static_cast<bool (*)(unsigned long long) >(&SimTK::ContactTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValidExtended(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValidExtended(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValidExtended", static_cast<bool (*)(int) >(&SimTK::ContactTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValidExtended(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValidExtended(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValidExtended", static_cast<bool (*)(short) >(&SimTK::ContactTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValidExtended(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValidExtended(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValidExtended", static_cast<bool (*)(long) >(&SimTK::ContactTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTypeId::isValidExtended(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTypeId::isValidExtended(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!isValidExtended", static_cast<bool (*)(long long) >(&SimTK::ContactTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId::size_type SimTK::ContactTypeId::max_size() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId::size_type SimTK::ContactTypeId::max_size()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  t2.method("SimTK!ContactTypeId!max_size", static_cast<SimTK::ContactTypeId::size_type (*)() >(&SimTK::ContactTypeId::max_size));

  /* End of SimTK::ContactTypeId class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::Contact
   */

  DEBUG_MSG("Adding wrapper for const char * SimTK::Contact::nameOfCondition(SimTK::Contact::Condition) (" __HERE__ ")");
  // signature to use in the veto list: const char * SimTK::Contact::nameOfCondition(SimTK::Contact::Condition)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:100:24
  t3.method("SimTK!Contact!nameOfCondition", static_cast<const char * (*)(SimTK::Contact::Condition) >(&SimTK::Contact::nameOfCondition));


  DEBUG_MSG("Adding wrapper for void SimTK::Contact::Contact(const SimTK::Contact &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:106:5
  t3.constructor<const SimTK::Contact &>();

  DEBUG_MSG("Adding wrapper for SimTK::Contact & SimTK::Contact::operator=(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact & SimTK::Contact::operator=(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:112:14
  t3.method("assign", static_cast<SimTK::Contact & (SimTK::Contact::*)(const SimTK::Contact &) >(&SimTK::Contact::operator=));

  DEBUG_MSG("Adding wrapper for void SimTK::Contact::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Contact::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:115:10
  t3.method("clear", static_cast<void (SimTK::Contact::*)() >(&SimTK::Contact::clear));

  DEBUG_MSG("Adding wrapper for bool SimTK::Contact::isEmpty() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::Contact::isEmpty()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:117:10
  t3.method("isEmpty", static_cast<bool (SimTK::Contact::*)()  const>(&SimTK::Contact::isEmpty));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::Contact::getContactId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::Contact::getContactId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:122:15
  t3.method("getContactId", static_cast<SimTK::ContactId (SimTK::Contact::*)()  const>(&SimTK::Contact::getContactId));

  DEBUG_MSG("Adding wrapper for SimTK::Contact::Condition SimTK::Contact::getCondition() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact::Condition SimTK::Contact::getCondition()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:124:15
  t3.method("getCondition", static_cast<SimTK::Contact::Condition (SimTK::Contact::*)()  const>(&SimTK::Contact::getCondition));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::Contact::getSurface1() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::Contact::getSurface1()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:127:25
  t3.method("getSurface1", static_cast<SimTK::ContactSurfaceIndex (SimTK::Contact::*)()  const>(&SimTK::Contact::getSurface1));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurfaceIndex SimTK::Contact::getSurface2() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurfaceIndex SimTK::Contact::getSurface2()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:130:25
  t3.method("getSurface2", static_cast<SimTK::ContactSurfaceIndex (SimTK::Contact::*)()  const>(&SimTK::Contact::getSurface2));

  DEBUG_MSG("Adding wrapper for const SimTK::Transform & SimTK::Contact::getTransform() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Transform & SimTK::Contact::getTransform()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:134:22
  t3.method("getTransform", static_cast<const SimTK::Transform & (SimTK::Contact::*)()  const>(&SimTK::Contact::getTransform));

  DEBUG_MSG("Adding wrapper for SimTK::Contact & SimTK::Contact::setContactId(SimTK::ContactId) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact & SimTK::Contact::setContactId(SimTK::ContactId)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:138:14
  t3.method("setContactId", static_cast<SimTK::Contact & (SimTK::Contact::*)(SimTK::ContactId) >(&SimTK::Contact::setContactId));

  DEBUG_MSG("Adding wrapper for SimTK::Contact & SimTK::Contact::setCondition(SimTK::Contact::Condition) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact & SimTK::Contact::setCondition(SimTK::Contact::Condition)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:140:14
  t3.method("setCondition", static_cast<SimTK::Contact & (SimTK::Contact::*)(SimTK::Contact::Condition) >(&SimTK::Contact::setCondition));

  DEBUG_MSG("Adding wrapper for SimTK::Contact & SimTK::Contact::setSurfaces(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact & SimTK::Contact::setSurfaces(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:142:14
  t3.method("setSurfaces", static_cast<SimTK::Contact & (SimTK::Contact::*)(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex) >(&SimTK::Contact::setSurfaces));

  DEBUG_MSG("Adding wrapper for SimTK::Contact & SimTK::Contact::setTransform(const SimTK::Transform &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Contact & SimTK::Contact::setTransform(const SimTK::Transform &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:144:14
  t3.method("setTransform", static_cast<SimTK::Contact & (SimTK::Contact::*)(const SimTK::Transform &) >(&SimTK::Contact::setTransform));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::Contact::getTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::Contact::getTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:148:19
  t3.method("getTypeId", static_cast<SimTK::ContactTypeId (SimTK::Contact::*)()  const>(&SimTK::Contact::getTypeId));

  DEBUG_MSG("Adding wrapper for SimTK::ContactId SimTK::Contact::createNewContactId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactId SimTK::Contact::createNewContactId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:153:22
  t3.method("SimTK!Contact!createNewContactId", static_cast<SimTK::ContactId (*)() >(&SimTK::Contact::createNewContactId));

  /* End of SimTK::Contact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::UntrackedContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::UntrackedContact::UntrackedContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:191:5
  t5.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex>();

  DEBUG_MSG("Adding wrapper for bool SimTK::UntrackedContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::UntrackedContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:194:17
  t5.method("SimTK!UntrackedContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::UntrackedContact::isInstance));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::UntrackedContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::UntrackedContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:196:26
  t5.method("SimTK!UntrackedContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::UntrackedContact::classTypeId));

  /* End of SimTK::UntrackedContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::BrokenContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::BrokenContact::BrokenContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:224:5
  t6.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::BrokenContact::getSeparation() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::BrokenContact::getSeparation()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:230:10
  t6.method("getSeparation", static_cast<SimTK::Real (SimTK::BrokenContact::*)()  const>(&SimTK::BrokenContact::getSeparation));

  DEBUG_MSG("Adding wrapper for bool SimTK::BrokenContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::BrokenContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:233:17
  t6.method("SimTK!BrokenContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::BrokenContact::isInstance));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::BrokenContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::BrokenContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:235:26
  t6.method("SimTK!BrokenContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::BrokenContact::classTypeId));

  /* End of SimTK::BrokenContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::CircularPointContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::CircularPointContact::CircularPointContact(SimTK::ContactSurfaceIndex, SimTK::Real, SimTK::ContactSurfaceIndex, SimTK::Real, const SimTK::Transform &, SimTK::Real, SimTK::Real, const SimTK::Vec3 &, const SimTK::UnitVec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:276:5
  t7.constructor<SimTK::ContactSurfaceIndex, SimTK::Real, SimTK::ContactSurfaceIndex, SimTK::Real, const SimTK::Transform &, SimTK::Real, SimTK::Real, const SimTK::Vec3 &, const SimTK::UnitVec3 &>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::CircularPointContact::getRadius1() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::CircularPointContact::getRadius1()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:283:10
  t7.method("getRadius1", static_cast<SimTK::Real (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getRadius1));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::CircularPointContact::getRadius2() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::CircularPointContact::getRadius2()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:285:10
  t7.method("getRadius2", static_cast<SimTK::Real (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getRadius2));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::CircularPointContact::getEffectiveRadius() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::CircularPointContact::getEffectiveRadius()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:288:10
  t7.method("getEffectiveRadius", static_cast<SimTK::Real (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getEffectiveRadius));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::CircularPointContact::getDepth() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::CircularPointContact::getDepth()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:293:10
  t7.method("getDepth", static_cast<SimTK::Real (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getDepth));

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::CircularPointContact::getOrigin() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::CircularPointContact::getOrigin()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:295:17
  t7.method("getOrigin", static_cast<const SimTK::Vec3 & (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getOrigin));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::CircularPointContact::getNormal() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::CircularPointContact::getNormal()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:299:21
  t7.method("getNormal", static_cast<const SimTK::UnitVec3 & (SimTK::CircularPointContact::*)()  const>(&SimTK::CircularPointContact::getNormal));

  DEBUG_MSG("Adding wrapper for bool SimTK::CircularPointContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::CircularPointContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:302:17
  t7.method("SimTK!CircularPointContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::CircularPointContact::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::CircularPointContact & SimTK::CircularPointContact::getAs(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::CircularPointContact & SimTK::CircularPointContact::getAs(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:303:40
  t7.method("SimTK!CircularPointContact!getAs", static_cast<const SimTK::CircularPointContact & (*)(const SimTK::Contact &) >(&SimTK::CircularPointContact::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::CircularPointContact & SimTK::CircularPointContact::updAs(SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::CircularPointContact & SimTK::CircularPointContact::updAs(SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:306:34
  t7.method("SimTK!CircularPointContact!updAs", static_cast<SimTK::CircularPointContact & (*)(SimTK::Contact &) >(&SimTK::CircularPointContact::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::CircularPointContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::CircularPointContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:311:26
  t7.method("SimTK!CircularPointContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::CircularPointContact::classTypeId));

  /* End of SimTK::CircularPointContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::EllipticalPointContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::EllipticalPointContact::EllipticalPointContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, const SimTK::Transform &, const SimTK::Vec2 &, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:370:5
  t8.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, const SimTK::Transform &, const SimTK::Vec2 &, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for const SimTK::Vec2 & SimTK::EllipticalPointContact::getCurvatures() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec2 & SimTK::EllipticalPointContact::getCurvatures()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:377:17
  t8.method("getCurvatures", static_cast<const SimTK::Vec2 & (SimTK::EllipticalPointContact::*)()  const>(&SimTK::EllipticalPointContact::getCurvatures));

  DEBUG_MSG("Adding wrapper for const SimTK::Transform & SimTK::EllipticalPointContact::getContactFrame() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Transform & SimTK::EllipticalPointContact::getContactFrame()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:384:22
  t8.method("getContactFrame", static_cast<const SimTK::Transform & (SimTK::EllipticalPointContact::*)()  const>(&SimTK::EllipticalPointContact::getContactFrame));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::EllipticalPointContact::getDepth() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::EllipticalPointContact::getDepth()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:389:10
  t8.method("getDepth", static_cast<SimTK::Real (SimTK::EllipticalPointContact::*)()  const>(&SimTK::EllipticalPointContact::getDepth));

  DEBUG_MSG("Adding wrapper for bool SimTK::EllipticalPointContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::EllipticalPointContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:392:17
  t8.method("SimTK!EllipticalPointContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::EllipticalPointContact::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::EllipticalPointContact & SimTK::EllipticalPointContact::getAs(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::EllipticalPointContact & SimTK::EllipticalPointContact::getAs(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:393:42
  t8.method("SimTK!EllipticalPointContact!getAs", static_cast<const SimTK::EllipticalPointContact & (*)(const SimTK::Contact &) >(&SimTK::EllipticalPointContact::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::EllipticalPointContact & SimTK::EllipticalPointContact::updAs(SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::EllipticalPointContact & SimTK::EllipticalPointContact::updAs(SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:396:36
  t8.method("SimTK!EllipticalPointContact!updAs", static_cast<SimTK::EllipticalPointContact & (*)(SimTK::Contact &) >(&SimTK::EllipticalPointContact::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::EllipticalPointContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::EllipticalPointContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:401:26
  t8.method("SimTK!EllipticalPointContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::EllipticalPointContact::classTypeId));

  /* End of SimTK::EllipticalPointContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::BrickHalfSpaceContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::BrickHalfSpaceContact::BrickHalfSpaceContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, int, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:430:5
  t9.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, int, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for int SimTK::BrickHalfSpaceContact::getLowestVertex() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::BrickHalfSpaceContact::getLowestVertex()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:438:9
  t9.method("getLowestVertex", static_cast<int (SimTK::BrickHalfSpaceContact::*)()  const>(&SimTK::BrickHalfSpaceContact::getLowestVertex));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::BrickHalfSpaceContact::getDepth() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::BrickHalfSpaceContact::getDepth()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:442:10
  t9.method("getDepth", static_cast<SimTK::Real (SimTK::BrickHalfSpaceContact::*)()  const>(&SimTK::BrickHalfSpaceContact::getDepth));

  DEBUG_MSG("Adding wrapper for bool SimTK::BrickHalfSpaceContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::BrickHalfSpaceContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:445:17
  t9.method("SimTK!BrickHalfSpaceContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::BrickHalfSpaceContact::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::BrickHalfSpaceContact & SimTK::BrickHalfSpaceContact::getAs(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::BrickHalfSpaceContact & SimTK::BrickHalfSpaceContact::getAs(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:449:41
  t9.method("SimTK!BrickHalfSpaceContact!getAs", static_cast<const SimTK::BrickHalfSpaceContact & (*)(const SimTK::Contact &) >(&SimTK::BrickHalfSpaceContact::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::BrickHalfSpaceContact & SimTK::BrickHalfSpaceContact::updAs(SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::BrickHalfSpaceContact & SimTK::BrickHalfSpaceContact::updAs(SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:455:35
  t9.method("SimTK!BrickHalfSpaceContact!updAs", static_cast<SimTK::BrickHalfSpaceContact & (*)(SimTK::Contact &) >(&SimTK::BrickHalfSpaceContact::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::BrickHalfSpaceContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::BrickHalfSpaceContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:461:26
  t9.method("SimTK!BrickHalfSpaceContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::BrickHalfSpaceContact::classTypeId));

  /* End of SimTK::BrickHalfSpaceContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::TriangleMeshContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::TriangleMeshContact::TriangleMeshContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, const std::set<int> &, const std::set<int> &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:491:5
  // t10.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, const SimTK::Transform &, const std::set<int> &, const std::set<int> &>();
  t10.constructor([] (SimTK::ContactSurfaceIndex surf1, SimTK::ContactSurfaceIndex surf2, const SimTK::Transform& X_S1S2, const jlcxx::ArrayRef<int>& faces1, const jlcxx::ArrayRef<int>& faces2) {
    std::set<int> faces1_set(faces1.begin(), faces1.end());
    std::set<int> faces2_set(faces2.begin(), faces2.end());
    
    return new SimTK::TriangleMeshContact(surf1, surf2, X_S1S2, faces1_set, faces2_set);
  });

  DEBUG_MSG("Adding wrapper for const std::set<int> & SimTK::TriangleMeshContact::getSurface1Faces() (" __HERE__ ")");
  // signature to use in the veto list: const std::set<int> & SimTK::TriangleMeshContact::getSurface1Faces()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:500:26
  // t10.method("getSurface1Faces", static_cast<const std::set<int> & (SimTK::TriangleMeshContact::*)()  const>(&SimTK::TriangleMeshContact::getSurface1Faces));
  t10.method("getSurface1Faces", [] (SimTK::TriangleMeshContact& self) -> std::vector<int> {
    auto input = self.getSurface1Faces();
    std::vector<int> output(input.begin(), input.end()); 
    return output;
  });

  DEBUG_MSG("Adding wrapper for const std::set<int> & SimTK::TriangleMeshContact::getSurface2Faces() (" __HERE__ ")");
  // signature to use in the veto list: const std::set<int> & SimTK::TriangleMeshContact::getSurface2Faces()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:504:26
  // t10.method("getSurface2Faces", static_cast<const std::set<int> & (SimTK::TriangleMeshContact::*)()  const>(&SimTK::TriangleMeshContact::getSurface2Faces));
  t10.method("getSurface2Faces", [] (SimTK::TriangleMeshContact& self) -> std::vector<int> {
    auto input = self.getSurface2Faces();
    std::vector<int> output(input.begin(), input.end()); 
    return output;
  });

  DEBUG_MSG("Adding wrapper for bool SimTK::TriangleMeshContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::TriangleMeshContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:507:17
  t10.method("SimTK!TriangleMeshContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::TriangleMeshContact::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::TriangleMeshContact & SimTK::TriangleMeshContact::getAs(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::TriangleMeshContact & SimTK::TriangleMeshContact::getAs(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:510:39
  t10.method("SimTK!TriangleMeshContact!getAs", static_cast<const SimTK::TriangleMeshContact & (*)(const SimTK::Contact &) >(&SimTK::TriangleMeshContact::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::TriangleMeshContact & SimTK::TriangleMeshContact::updAs(SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::TriangleMeshContact & SimTK::TriangleMeshContact::updAs(SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:515:33
  t10.method("SimTK!TriangleMeshContact!updAs", static_cast<SimTK::TriangleMeshContact & (*)(SimTK::Contact &) >(&SimTK::TriangleMeshContact::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::TriangleMeshContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::TriangleMeshContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:521:26
  t10.method("SimTK!TriangleMeshContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::TriangleMeshContact::classTypeId));

  /* End of SimTK::TriangleMeshContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::PointContact
   */


  DEBUG_MSG("Adding wrapper for void SimTK::PointContact::PointContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real, SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:560:5
  t11.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real, SimTK::Real, SimTK::Real>();


  DEBUG_MSG("Adding wrapper for void SimTK::PointContact::PointContact(SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:577:5
  t11.constructor<SimTK::ContactSurfaceIndex, SimTK::ContactSurfaceIndex, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::PointContact::getLocation() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::PointContact::getLocation()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:584:10
  t11.method("getLocation", static_cast<SimTK::Vec3 (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getLocation));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::PointContact::getNormal() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::PointContact::getNormal()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:589:10
  t11.method("getNormal", static_cast<SimTK::Vec3 (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getNormal));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::PointContact::getRadiusOfCurvature1() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::PointContact::getRadiusOfCurvature1()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:593:10
  t11.method("getRadiusOfCurvature1", static_cast<SimTK::Real (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getRadiusOfCurvature1));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::PointContact::getRadiusOfCurvature2() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::PointContact::getRadiusOfCurvature2()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:597:10
  t11.method("getRadiusOfCurvature2", static_cast<SimTK::Real (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getRadiusOfCurvature2));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::PointContact::getEffectiveRadiusOfCurvature() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::PointContact::getEffectiveRadiusOfCurvature()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:602:10
  t11.method("getEffectiveRadiusOfCurvature", static_cast<SimTK::Real (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getEffectiveRadiusOfCurvature));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::PointContact::getDepth() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::PointContact::getDepth()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:608:10
  t11.method("getDepth", static_cast<SimTK::Real (SimTK::PointContact::*)()  const>(&SimTK::PointContact::getDepth));

  DEBUG_MSG("Adding wrapper for bool SimTK::PointContact::isInstance(const SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::PointContact::isInstance(const SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:612:17
  t11.method("SimTK!PointContact!isInstance", static_cast<bool (*)(const SimTK::Contact &) >(&SimTK::PointContact::isInstance));

  DEBUG_MSG("Adding wrapper for SimTK::ContactTypeId SimTK::PointContact::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactTypeId SimTK::PointContact::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:616:26
  t11.method("SimTK!PointContact!classTypeId", static_cast<SimTK::ContactTypeId (*)() >(&SimTK::PointContact::classTypeId));

  /* End of SimTK::PointContact class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::Geodesic
   */

  DEBUG_MSG("Adding wrapper for int SimTK::Geodesic::getNumPoints() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::Geodesic::getNumPoints()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:56:9
  t12.method("getNumPoints", static_cast<int (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getNumPoints));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Transform> & SimTK::Geodesic::getFrenetFrames() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Transform> & SimTK::Geodesic::getFrenetFrames()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:66:30
  t12.method("getFrenetFrames", static_cast<const SimTK::Array_<SimTK::Transform> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getFrenetFrames));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Transform> & SimTK::Geodesic::updFrenetFrames() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Transform> & SimTK::Geodesic::updFrenetFrames()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:67:30
  t12.method("updFrenetFrames", static_cast<SimTK::Array_<SimTK::Transform> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updFrenetFrames));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addFrenetFrame(const SimTK::Transform &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addFrenetFrame(const SimTK::Transform &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:68:10
  t12.method("addFrenetFrame", static_cast<void (SimTK::Geodesic::*)(const SimTK::Transform &) >(&SimTK::Geodesic::addFrenetFrame));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Real> & SimTK::Geodesic::updArcLengths() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Real> & SimTK::Geodesic::updArcLengths()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:70:19
  t12.method("updArcLengths", static_cast<SimTK::Array_<SimTK::Real> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updArcLengths));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Real> & SimTK::Geodesic::getArcLengths() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Real> & SimTK::Geodesic::getArcLengths()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:71:25
  t12.method("getArcLengths", static_cast<const SimTK::Array_<SimTK::Real> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getArcLengths));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addArcLength(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addArcLength(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:72:10
  t12.method("addArcLength", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::addArcLength));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Real> & SimTK::Geodesic::updCurvatures() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Real> & SimTK::Geodesic::updCurvatures()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:74:19
  t12.method("updCurvatures", static_cast<SimTK::Array_<SimTK::Real> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updCurvatures));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Real> & SimTK::Geodesic::getCurvatures() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Real> & SimTK::Geodesic::getCurvatures()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:75:25
  t12.method("getCurvatures", static_cast<const SimTK::Array_<SimTK::Real> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getCurvatures));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addCurvature(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addCurvature(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:76:10
  t12.method("addCurvature", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::addCurvature));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updDirectionalSensitivityPtoQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updDirectionalSensitivityPtoQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:78:19
  t12.method("updDirectionalSensitivityPtoQ", static_cast<SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updDirectionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getDirectionalSensitivityPtoQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getDirectionalSensitivityPtoQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:80:25
  t12.method("getDirectionalSensitivityPtoQ", static_cast<const SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getDirectionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addDirectionalSensitivityPtoQ(const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addDirectionalSensitivityPtoQ(const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:82:10
  t12.method("addDirectionalSensitivityPtoQ", static_cast<void (SimTK::Geodesic::*)(const SimTK::Vec2 &) >(&SimTK::Geodesic::addDirectionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updDirectionalSensitivityQtoP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updDirectionalSensitivityQtoP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:86:19
  t12.method("updDirectionalSensitivityQtoP", static_cast<SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updDirectionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getDirectionalSensitivityQtoP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getDirectionalSensitivityQtoP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:88:25
  t12.method("getDirectionalSensitivityQtoP", static_cast<const SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getDirectionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addDirectionalSensitivityQtoP(const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addDirectionalSensitivityQtoP(const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:90:10
  t12.method("addDirectionalSensitivityQtoP", static_cast<void (SimTK::Geodesic::*)(const SimTK::Vec2 &) >(&SimTK::Geodesic::addDirectionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updPositionalSensitivityPtoQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updPositionalSensitivityPtoQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:94:19
  t12.method("updPositionalSensitivityPtoQ", static_cast<SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updPositionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getPositionalSensitivityPtoQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getPositionalSensitivityPtoQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:96:25
  t12.method("getPositionalSensitivityPtoQ", static_cast<const SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getPositionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addPositionalSensitivityPtoQ(const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addPositionalSensitivityPtoQ(const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:98:10
  t12.method("addPositionalSensitivityPtoQ", static_cast<void (SimTK::Geodesic::*)(const SimTK::Vec2 &) >(&SimTK::Geodesic::addPositionalSensitivityPtoQ));

  DEBUG_MSG("Adding wrapper for SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updPositionalSensitivityQtoP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::updPositionalSensitivityQtoP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:102:19
  t12.method("updPositionalSensitivityQtoP", static_cast<SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)() >(&SimTK::Geodesic::updPositionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getPositionalSensitivityQtoP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<SimTK::Vec2> & SimTK::Geodesic::getPositionalSensitivityQtoP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:104:25
  t12.method("getPositionalSensitivityQtoP", static_cast<const SimTK::Array_<SimTK::Vec2> & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getPositionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::addPositionalSensitivityQtoP(const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::addPositionalSensitivityQtoP(const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:106:10
  t12.method("addPositionalSensitivityQtoP", static_cast<void (SimTK::Geodesic::*)(const SimTK::Vec2 &) >(&SimTK::Geodesic::addPositionalSensitivityQtoP));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setTorsionAtP(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setTorsionAtP(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:110:10
  t12.method("setTorsionAtP", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setTorsionAtP));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setTorsionAtQ(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setTorsionAtQ(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:111:10
  t12.method("setTorsionAtQ", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setTorsionAtQ));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setBinormalCurvatureAtP(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setBinormalCurvatureAtP(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:112:10
  t12.method("setBinormalCurvatureAtP", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setBinormalCurvatureAtP));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setBinormalCurvatureAtQ(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setBinormalCurvatureAtQ(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:113:10
  t12.method("setBinormalCurvatureAtQ", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setBinormalCurvatureAtQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getLength() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getLength()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:117:10
  t12.method("getLength", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getLength));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::calcLengthDot(const SimTK::Vec3 &, const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::calcLengthDot(const SimTK::Vec3 &, const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:124:10
  t12.method("calcLengthDot", static_cast<SimTK::Real (SimTK::Geodesic::*)(const SimTK::Vec3 &, const SimTK::Vec3 &)  const>(&SimTK::Geodesic::calcLengthDot));

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::Geodesic::getPointP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::Geodesic::getPointP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:129:17
  t12.method("getPointP", static_cast<const SimTK::Vec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getPointP));

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::Geodesic::getPointQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::Geodesic::getPointQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:132:17
  t12.method("getPointQ", static_cast<const SimTK::Vec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getPointQ));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getNormalP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getNormalP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:137:21
  t12.method("getNormalP", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getNormalP));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getNormalQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getNormalQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:141:21
  t12.method("getNormalQ", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getNormalQ));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getTangentP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getTangentP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:145:21
  t12.method("getTangentP", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getTangentP));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getTangentQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getTangentQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:148:21
  t12.method("getTangentQ", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getTangentQ));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getBinormalP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getBinormalP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:152:21
  t12.method("getBinormalP", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getBinormalP));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::Geodesic::getBinormalQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::Geodesic::getBinormalQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:155:21
  t12.method("getBinormalQ", static_cast<const SimTK::UnitVec3 & (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getBinormalQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getCurvatureP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getCurvatureP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:162:10
  t12.method("getCurvatureP", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getCurvatureP));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getCurvatureQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getCurvatureQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:170:10
  t12.method("getCurvatureQ", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getCurvatureQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getTorsionP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getTorsionP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:176:10
  t12.method("getTorsionP", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getTorsionP));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getTorsionQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getTorsionQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:181:10
  t12.method("getTorsionQ", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getTorsionQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getBinormalCurvatureP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getBinormalCurvatureP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:186:10
  t12.method("getBinormalCurvatureP", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getBinormalCurvatureP));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getBinormalCurvatureQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getBinormalCurvatureQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:190:10
  t12.method("getBinormalCurvatureQ", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getBinormalCurvatureQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:197:10
  t12.method("getJacobiP", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiP));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:203:10
  t12.method("getJacobiQ", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiPDot() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiPDot()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:210:10
  t12.method("getJacobiPDot", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiPDot));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiQDot() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiQDot()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:213:10
  t12.method("getJacobiQDot", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiQDot));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiTransP() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiTransP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:216:10
  t12.method("getJacobiTransP", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiTransP));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiTransQ() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiTransQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:217:10
  t12.method("getJacobiTransQ", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiTransQ));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiTransPDot() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiTransPDot()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:218:10
  t12.method("getJacobiTransPDot", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiTransPDot));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getJacobiTransQDot() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getJacobiTransQDot()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:219:10
  t12.method("getJacobiTransQDot", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getJacobiTransQDot));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:223:10
  t12.method("clear", static_cast<void (SimTK::Geodesic::*)() >(&SimTK::Geodesic::clear));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setIsConvex(bool) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setIsConvex(bool)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:237:10
  t12.method("setIsConvex", static_cast<void (SimTK::Geodesic::*)(bool) >(&SimTK::Geodesic::setIsConvex));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setIsShortest(bool) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setIsShortest(bool)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:238:10
  t12.method("setIsShortest", static_cast<void (SimTK::Geodesic::*)(bool) >(&SimTK::Geodesic::setIsShortest));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setInitialStepSizeHint(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setInitialStepSizeHint(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:239:10
  t12.method("setInitialStepSizeHint", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setInitialStepSizeHint));

  DEBUG_MSG("Adding wrapper for void SimTK::Geodesic::setAchievedAccuracy(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::Geodesic::setAchievedAccuracy(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:240:10
  t12.method("setAchievedAccuracy", static_cast<void (SimTK::Geodesic::*)(SimTK::Real) >(&SimTK::Geodesic::setAchievedAccuracy));

  DEBUG_MSG("Adding wrapper for bool SimTK::Geodesic::isConvex() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::Geodesic::isConvex()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:242:10
  t12.method("isConvex", static_cast<bool (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::isConvex));

  DEBUG_MSG("Adding wrapper for bool SimTK::Geodesic::isShortest() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::Geodesic::isShortest()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:243:10
  t12.method("isShortest", static_cast<bool (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::isShortest));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getInitialStepSizeHint() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getInitialStepSizeHint()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:244:10
  t12.method("getInitialStepSizeHint", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getInitialStepSizeHint));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Geodesic::getAchievedAccuracy() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Geodesic::getAchievedAccuracy()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:245:10
  t12.method("getAchievedAccuracy", static_cast<SimTK::Real (SimTK::Geodesic::*)()  const>(&SimTK::Geodesic::getAchievedAccuracy));

  /* End of SimTK::Geodesic class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::GeodesicDecorator
   */


  DEBUG_MSG("Adding wrapper for void SimTK::GeodesicDecorator::GeodesicDecorator(const SimTK::Geodesic &, const SimTK::Vec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:276:5
  t13.constructor<const SimTK::Geodesic &, const SimTK::Vec3 &>();

  DEBUG_MSG("Adding wrapper for void SimTK::GeodesicDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::GeodesicDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Geodesic.h:279:18
  t13.method("generateDecorations", static_cast<void (SimTK::GeodesicDecorator::*)(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) >(&SimTK::GeodesicDecorator::generateDecorations));

  /* End of SimTK::GeodesicDecorator class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometryTypeId
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<long long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(unsigned int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<unsigned int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(unsigned long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<unsigned long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::ContactGeometryTypeId(unsigned long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:32
  t16.constructor<unsigned long long>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("isValid", static_cast<bool (SimTK::ContactGeometryTypeId::*)()  const>(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValidExtended() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValidExtended()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("isValidExtended", static_cast<bool (SimTK::ContactGeometryTypeId::*)()  const>(&SimTK::ContactGeometryTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::invalidate() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometryTypeId::invalidate()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("invalidate", static_cast<void (SimTK::ContactGeometryTypeId::*)() >(&SimTK::ContactGeometryTypeId::invalidate));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometryTypeId::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometryTypeId::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("clear", static_cast<void (SimTK::ContactGeometryTypeId::*)() >(&SimTK::ContactGeometryTypeId::clear));
  types.set_override_module(jl_base_module);

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(const SimTK::ContactGeometryTypeId &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(const SimTK::ContactGeometryTypeId &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(const SimTK::ContactGeometryTypeId &)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned short)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator==(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator==(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("==", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator!=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator!=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("!=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned short)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned short)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned short)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator>(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator>(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method(">", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(int)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(short)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(long long)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned int)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned short)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long)  const>(&SimTK::ContactGeometryTypeId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::operator<=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::operator<=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("<=", static_cast<bool (SimTK::ContactGeometryTypeId::*)(unsigned long long)  const>(&SimTK::ContactGeometryTypeId::operator<=));
  types.unset_override_module();

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator++() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator++()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("inc!", static_cast<const SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)() >(&SimTK::ContactGeometryTypeId::operator++));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::operator++(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::operator++(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("inc!", static_cast<SimTK::ContactGeometryTypeId (SimTK::ContactGeometryTypeId::*)(int) >(&SimTK::ContactGeometryTypeId::operator++));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator--() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator--()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("dec!", static_cast<const SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)() >(&SimTK::ContactGeometryTypeId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::operator--(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::operator--(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("dec!", static_cast<SimTK::ContactGeometryTypeId (SimTK::ContactGeometryTypeId::*)(int) >(&SimTK::ContactGeometryTypeId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::next() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::next()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("next", static_cast<SimTK::ContactGeometryTypeId (SimTK::ContactGeometryTypeId::*)()  const>(&SimTK::ContactGeometryTypeId::next));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::prev() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometryTypeId::prev()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("prev", static_cast<SimTK::ContactGeometryTypeId (SimTK::ContactGeometryTypeId::*)()  const>(&SimTK::ContactGeometryTypeId::prev));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(int) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(int) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(short) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(short) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(long) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(long) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(long long) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(long long) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned int) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned int) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned short) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned short) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned long) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned long) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator+=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("add!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned long long) >(&SimTK::ContactGeometryTypeId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::operator-=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("sub!", static_cast<SimTK::ContactGeometryTypeId & (SimTK::ContactGeometryTypeId::*)(unsigned long long) >(&SimTK::ContactGeometryTypeId::operator-=));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::Invalid() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometryTypeId & SimTK::ContactGeometryTypeId::Invalid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!Invalid", static_cast<const SimTK::ContactGeometryTypeId & (*)() >(&SimTK::ContactGeometryTypeId::Invalid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(int) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(short) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(long) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(long long) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(unsigned int) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(unsigned short) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(unsigned long) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValid(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValid(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValid", static_cast<bool (*)(unsigned long long) >(&SimTK::ContactGeometryTypeId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValidExtended(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValidExtended(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValidExtended", static_cast<bool (*)(int) >(&SimTK::ContactGeometryTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValidExtended(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValidExtended(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValidExtended", static_cast<bool (*)(short) >(&SimTK::ContactGeometryTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValidExtended(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValidExtended(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValidExtended", static_cast<bool (*)(long) >(&SimTK::ContactGeometryTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometryTypeId::isValidExtended(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometryTypeId::isValidExtended(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!isValidExtended", static_cast<bool (*)(long long) >(&SimTK::ContactGeometryTypeId::isValidExtended));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId::size_type SimTK::ContactGeometryTypeId::max_size() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId::size_type SimTK::ContactGeometryTypeId::max_size()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  t16.method("SimTK!ContactGeometryTypeId!max_size", static_cast<SimTK::ContactGeometryTypeId::size_type (*)() >(&SimTK::ContactGeometryTypeId::max_size));

  /* End of SimTK::ContactGeometryTypeId class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::ContactGeometry(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:127:1
  t17.constructor<const SimTK::ContactGeometry &>();

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry & SimTK::ContactGeometry::operator=(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry & SimTK::ContactGeometry::operator=(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:129:18
  t17.method("assign", static_cast<SimTK::ContactGeometry & (SimTK::ContactGeometry::*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::operator=));

  DEBUG_MSG("Adding wrapper for SimTK::DecorativeGeometry SimTK::ContactGeometry::createDecorativeGeometry() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::DecorativeGeometry SimTK::ContactGeometry::createDecorativeGeometry()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:136:20
  t17.method("createDecorativeGeometry", static_cast<SimTK::DecorativeGeometry (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::createDecorativeGeometry));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::findNearestPoint(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::findNearestPoint(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:148:6
  t17.method("findNearestPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::findNearestPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::projectDownhillToNearestPoint(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::projectDownhillToNearestPoint(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:164:6
  t17.method("projectDownhillToNearestPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::projectDownhillToNearestPoint));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::trackSeparationFromLine(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::trackSeparationFromLine(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:230:6
  t17.method("trackSeparationFromLine", static_cast<bool (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::Real &)  const>(&SimTK::ContactGeometry::trackSeparationFromLine));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:250:6
  t17.method("intersectsRay", static_cast<bool (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::intersectsRay));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::getBoundingSphere(SimTK::Vec3 &, SimTK::Real &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::getBoundingSphere(SimTK::Vec3 &, SimTK::Real &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:258:6
  t17.method("getBoundingSphere", static_cast<void (SimTK::ContactGeometry::*)(SimTK::Vec3 &, SimTK::Real &)  const>(&SimTK::ContactGeometry::getBoundingSphere));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::isSmooth() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::isSmooth()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:263:6
  t17.method("isSmooth", static_cast<bool (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::isSmooth));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcCurvature(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcCurvature(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:281:6
  t17.method("calcCurvature", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &)  const>(&SimTK::ContactGeometry::calcCurvature));

  DEBUG_MSG("Adding wrapper for const SimTK::Function & SimTK::ContactGeometry::getImplicitFunction() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Function & SimTK::ContactGeometry::getImplicitFunction()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:294:17
  t17.method("getImplicitFunction", static_cast<const SimTK::Function & (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getImplicitFunction));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::calcSurfaceValue(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::calcSurfaceValue(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:301:6
  t17.method("calcSurfaceValue", static_cast<SimTK::Real (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::calcSurfaceValue));

  DEBUG_MSG("Adding wrapper for SimTK::UnitVec3 SimTK::ContactGeometry::calcSurfaceUnitNormal(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::UnitVec3 SimTK::ContactGeometry::calcSurfaceUnitNormal(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:313:10
  t17.method("calcSurfaceUnitNormal", static_cast<SimTK::UnitVec3 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::calcSurfaceUnitNormal));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::calcSurfaceGradient(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::calcSurfaceGradient(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:320:6
  t17.method("calcSurfaceGradient", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::calcSurfaceGradient));

  DEBUG_MSG("Adding wrapper for SimTK::Mat33 SimTK::ContactGeometry::calcSurfaceHessian(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Mat33 SimTK::ContactGeometry::calcSurfaceHessian(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:327:7
  t17.method("calcSurfaceHessian", static_cast<SimTK::Mat33 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::calcSurfaceHessian));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::calcGaussianCurvature(const SimTK::Vec3 &, const SimTK::Mat33 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::calcGaussianCurvature(const SimTK::Vec3 &, const SimTK::Mat33 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:357:6
  t17.method("calcGaussianCurvature", static_cast<SimTK::Real (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Mat33 &)  const>(&SimTK::ContactGeometry::calcGaussianCurvature));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::calcGaussianCurvature(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::calcGaussianCurvature(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:363:6
  t17.method("calcGaussianCurvature", static_cast<SimTK::Real (SimTK::ContactGeometry::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::calcGaussianCurvature));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::calcSurfaceCurvatureInDirection(const SimTK::Vec3 &, const SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::calcSurfaceCurvatureInDirection(const SimTK::Vec3 &, const SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:376:6
  t17.method("calcSurfaceCurvatureInDirection", static_cast<SimTK::Real (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::calcSurfaceCurvatureInDirection));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcSurfacePrincipalCurvatures(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcSurfacePrincipalCurvatures(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:386:6
  t17.method("calcSurfacePrincipalCurvatures", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, SimTK::Vec2 &, SimTK::Rotation &)  const>(&SimTK::ContactGeometry::calcSurfacePrincipalCurvatures));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::isConvex() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::isConvex()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:391:6
  t17.method("isConvex", static_cast<bool (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::isConvex));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::calcSupportPoint(SimTK::UnitVec3) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::calcSupportPoint(SimTK::UnitVec3)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:398:6
  t17.method("calcSupportPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::*)(SimTK::UnitVec3)  const>(&SimTK::ContactGeometry::calcSupportPoint));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::getTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::getTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:402:23
  t17.method("getTypeId", static_cast<SimTK::ContactGeometryTypeId (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getTypeId));

  DEBUG_MSG("Adding wrapper for SimTK::Vec2 SimTK::ContactGeometry::evalParametricCurvature(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Transform &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec2 SimTK::ContactGeometry::evalParametricCurvature(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Transform &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:454:13
  t17.method("SimTK!ContactGeometry!evalParametricCurvature", static_cast<SimTK::Vec2 (*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Transform &) >(&SimTK::ContactGeometry::evalParametricCurvature));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::combineParaboloids(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Rotation &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::combineParaboloids(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Rotation &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:533:13
  t17.method("SimTK!ContactGeometry!combineParaboloids", static_cast<void (*)(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Rotation &, SimTK::Vec2 &) >(&SimTK::ContactGeometry::combineParaboloids));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::combineParaboloids(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::combineParaboloids(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:541:13
  t17.method("SimTK!ContactGeometry!combineParaboloids", static_cast<void (*)(const SimTK::Rotation &, const SimTK::Vec2 &, const SimTK::UnitVec3 &, const SimTK::Vec2 &, SimTK::Vec2 &) >(&SimTK::ContactGeometry::combineParaboloids));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::initGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::initGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:559:6
  t17.method("initGeodesic", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::initGeodesic));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::continueGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Geodesic &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::continueGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Geodesic &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:606:6
  t17.method("continueGeodesic", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Geodesic &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::continueGeodesic));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::makeStraightLineGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::makeStraightLineGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:635:6
  t17.method("makeStraightLineGeodesic", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::makeStraightLineGeodesic));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReached(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReached(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:650:6
  t17.method("shootGeodesicInDirectionUntilLengthReached", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReached));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcGeodesicReverseSensitivity(SimTK::Geodesic &, const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcGeodesicReverseSensitivity(SimTK::Geodesic &, const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:667:6
  t17.method("calcGeodesicReverseSensitivity", static_cast<void (SimTK::ContactGeometry::*)(SimTK::Geodesic &, const SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::calcGeodesicReverseSensitivity));
  t17.method("calcGeodesicReverseSensitivity", [](SimTK::ContactGeometry const& a, SimTK::Geodesic & arg0) -> void { a.calcGeodesicReverseSensitivity(arg0); });
  t17.method("calcGeodesicReverseSensitivity", [](SimTK::ContactGeometry const* a, SimTK::Geodesic & arg0) -> void { a->calcGeodesicReverseSensitivity(arg0); });

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHit(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHit(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:683:6
  t17.method("shootGeodesicInDirectionUntilPlaneHit", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHit));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcGeodesic(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:690:6
  t17.method("calcGeodesic", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::calcGeodesic));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Real, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Real, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:695:6
  t17.method("calcGeodesicUsingOrthogonalMethod", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Real, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod(const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod(const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:700:6
  t17.method("calcGeodesicUsingOrthogonalMethod", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::calcGeodesicUsingOrthogonalMethod));

  DEBUG_MSG("Adding wrapper for SimTK::Vec2 SimTK::ContactGeometry::calcSplitGeodError(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec2 SimTK::ContactGeometry::calcSplitGeodError(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:723:6
  t17.method("calcSplitGeodError", static_cast<SimTK::Vec2 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *)  const>(&SimTK::ContactGeometry::calcSplitGeodError));
  t17.method("calcSplitGeodError", [](SimTK::ContactGeometry const& a, const SimTK::Vec3 & arg0, const SimTK::Vec3 & arg1, const SimTK::UnitVec3 & arg2, const SimTK::UnitVec3 & arg3) -> SimTK::Vec2 { return a.calcSplitGeodError(arg0, arg1, arg2, arg3); });
  t17.method("calcSplitGeodError", [](SimTK::ContactGeometry const* a, const SimTK::Vec3 & arg0, const SimTK::Vec3 & arg1, const SimTK::UnitVec3 & arg2, const SimTK::UnitVec3 & arg3) -> SimTK::Vec2 { return a->calcSplitGeodError(arg0, arg1, arg2, arg3); });

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReachedAnalytical(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReachedAnalytical(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:740:6
  t17.method("shootGeodesicInDirectionUntilLengthReachedAnalytical", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Real &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::shootGeodesicInDirectionUntilLengthReachedAnalytical));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHitAnalytical(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHitAnalytical(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:757:6
  t17.method("shootGeodesicInDirectionUntilPlaneHitAnalytical", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::Plane &, const SimTK::GeodesicOptions &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::shootGeodesicInDirectionUntilPlaneHitAnalytical));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::calcGeodesicAnalytical(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::calcGeodesicAnalytical(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:766:6
  t17.method("calcGeodesicAnalytical", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &, SimTK::Geodesic &)  const>(&SimTK::ContactGeometry::calcGeodesicAnalytical));

  DEBUG_MSG("Adding wrapper for SimTK::Vec2 SimTK::ContactGeometry::calcSplitGeodErrorAnalytical(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec2 SimTK::ContactGeometry::calcSplitGeodErrorAnalytical(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:777:6
  t17.method("calcSplitGeodErrorAnalytical", static_cast<SimTK::Vec2 (SimTK::ContactGeometry::*)(const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::UnitVec3 &, const SimTK::UnitVec3 &, SimTK::Geodesic *)  const>(&SimTK::ContactGeometry::calcSplitGeodErrorAnalytical));
  t17.method("calcSplitGeodErrorAnalytical", [](SimTK::ContactGeometry const& a, const SimTK::Vec3 & arg0, const SimTK::Vec3 & arg1, const SimTK::UnitVec3 & arg2, const SimTK::UnitVec3 & arg3) -> SimTK::Vec2 { return a.calcSplitGeodErrorAnalytical(arg0, arg1, arg2, arg3); });
  t17.method("calcSplitGeodErrorAnalytical", [](SimTK::ContactGeometry const* a, const SimTK::Vec3 & arg0, const SimTK::Vec3 & arg1, const SimTK::UnitVec3 & arg2, const SimTK::UnitVec3 & arg3) -> SimTK::Vec2 { return a->calcSplitGeodErrorAnalytical(arg0, arg1, arg2, arg3); });

  DEBUG_MSG("Adding wrapper for const SimTK::Plane & SimTK::ContactGeometry::getPlane() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Plane & SimTK::ContactGeometry::getPlane()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:791:14
  t17.method("getPlane", static_cast<const SimTK::Plane & (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getPlane));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::setPlane(const SimTK::Plane &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::setPlane(const SimTK::Plane &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:794:6
  t17.method("setPlane", static_cast<void (SimTK::ContactGeometry::*)(const SimTK::Plane &)  const>(&SimTK::ContactGeometry::setPlane));

  DEBUG_MSG("Adding wrapper for const SimTK::Geodesic & SimTK::ContactGeometry::getGeodP() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Geodesic & SimTK::ContactGeometry::getGeodP()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:796:17
  t17.method("getGeodP", static_cast<const SimTK::Geodesic & (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getGeodP));

  DEBUG_MSG("Adding wrapper for const SimTK::Geodesic & SimTK::ContactGeometry::getGeodQ() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Geodesic & SimTK::ContactGeometry::getGeodQ()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:798:17
  t17.method("getGeodQ", static_cast<const SimTK::Geodesic & (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getGeodQ));

  DEBUG_MSG("Adding wrapper for const int SimTK::ContactGeometry::getNumGeodesicsShot() (" __HERE__ ")");
  // signature to use in the veto list: const int SimTK::ContactGeometry::getNumGeodesicsShot()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:799:11
  t17.method("getNumGeodesicsShot", static_cast<const int (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::getNumGeodesicsShot));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::addVizReporter(SimTK::ScheduledEventReporter *) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::addVizReporter(SimTK::ScheduledEventReporter *)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:800:6
  t17.method("addVizReporter", static_cast<void (SimTK::ContactGeometry::*)(SimTK::ScheduledEventReporter *)  const>(&SimTK::ContactGeometry::addVizReporter));


  // DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::ContactGeometry(SimTK::ContactGeometryImpl *) (" __HERE__ ")");
  // // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:805:10
  // t17.constructor<SimTK::ContactGeometryImpl *>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::isOwnerHandle() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::isOwnerHandle()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:806:6
  t17.method("isOwnerHandle", static_cast<bool (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::isOwnerHandle));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::isEmptyHandle() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::isEmptyHandle()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:807:6
  t17.method("isEmptyHandle", static_cast<bool (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::isEmptyHandle));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::hasImpl() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::hasImpl()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:808:6
  t17.method("hasImpl", static_cast<bool (SimTK::ContactGeometry::*)()  const>(&SimTK::ContactGeometry::hasImpl));

  /* End of SimTK::ContactGeometry class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::Plane
   */


  DEBUG_MSG("Adding wrapper for void SimTK::Plane::Plane(const SimTK::Vec3 &, const SimTK::Real &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1417:5
  t19.constructor<const SimTK::Vec3 &, const SimTK::Real &>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Plane::getDistance(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Plane::getDistance(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1420:10
  t19.method("getDistance", static_cast<SimTK::Real (SimTK::Plane::*)(const SimTK::Vec3 &)  const>(&SimTK::Plane::getDistance));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::Plane::getNormal() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::Plane::getNormal()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1424:10
  t19.method("getNormal", static_cast<SimTK::Vec3 (SimTK::Plane::*)()  const>(&SimTK::Plane::getNormal));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::Plane::getOffset() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::Plane::getOffset()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1428:10
  t19.method("getOffset", static_cast<SimTK::Real (SimTK::Plane::*)()  const>(&SimTK::Plane::getOffset));

  /* End of SimTK::Plane class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::HalfSpace
   */

  DEBUG_MSG("Adding wrapper for SimTK::UnitVec3 SimTK::ContactGeometry::HalfSpace::getNormal() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::UnitVec3 SimTK::ContactGeometry::HalfSpace::getNormal()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:836:10
  t21.method("getNormal", static_cast<SimTK::UnitVec3 (SimTK::ContactGeometry::HalfSpace::*)()  const>(&SimTK::ContactGeometry::HalfSpace::getNormal));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::HalfSpace::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::HalfSpace::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:839:13
  t21.method("SimTK!ContactGeometry!HalfSpace!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::HalfSpace::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::HalfSpace & SimTK::ContactGeometry::HalfSpace::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::HalfSpace & SimTK::ContactGeometry::HalfSpace::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:842:25
  t21.method("SimTK!ContactGeometry!HalfSpace!getAs", static_cast<const SimTK::ContactGeometry::HalfSpace & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::HalfSpace::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::HalfSpace & SimTK::ContactGeometry::HalfSpace::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::HalfSpace & SimTK::ContactGeometry::HalfSpace::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:845:19
  t21.method("SimTK!ContactGeometry!HalfSpace!updAs", static_cast<SimTK::ContactGeometry::HalfSpace & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::HalfSpace::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::HalfSpace::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::HalfSpace::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:849:30
  t21.method("SimTK!ContactGeometry!HalfSpace!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::HalfSpace::classTypeId));

  /* End of SimTK::ContactGeometry::HalfSpace class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::Cylinder
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Cylinder::Cylinder(SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:866:10
  t22.constructor<SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::Cylinder::getRadius() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::Cylinder::getRadius()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:867:6
  t22.method("getRadius", static_cast<SimTK::Real (SimTK::ContactGeometry::Cylinder::*)()  const>(&SimTK::ContactGeometry::Cylinder::getRadius));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Cylinder::setRadius(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Cylinder::setRadius(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:868:6
  t22.method("setRadius", static_cast<void (SimTK::ContactGeometry::Cylinder::*)(SimTK::Real) >(&SimTK::ContactGeometry::Cylinder::setRadius));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::Cylinder::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::Cylinder::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:871:13
  t22.method("SimTK!ContactGeometry!Cylinder!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Cylinder::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::Cylinder & SimTK::ContactGeometry::Cylinder::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::Cylinder & SimTK::ContactGeometry::Cylinder::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:874:24
  t22.method("SimTK!ContactGeometry!Cylinder!getAs", static_cast<const SimTK::ContactGeometry::Cylinder & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Cylinder::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::Cylinder & SimTK::ContactGeometry::Cylinder::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::Cylinder & SimTK::ContactGeometry::Cylinder::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:877:18
  t22.method("SimTK!ContactGeometry!Cylinder!updAs", static_cast<SimTK::ContactGeometry::Cylinder & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Cylinder::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Cylinder::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Cylinder::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:881:30
  t22.method("SimTK!ContactGeometry!Cylinder!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::Cylinder::classTypeId));

  /* End of SimTK::ContactGeometry::Cylinder class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::Sphere
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Sphere::Sphere(SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:897:10
  t23.constructor<SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::Sphere::getRadius() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::Sphere::getRadius()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:898:6
  t23.method("getRadius", static_cast<SimTK::Real (SimTK::ContactGeometry::Sphere::*)()  const>(&SimTK::ContactGeometry::Sphere::getRadius));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Sphere::setRadius(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Sphere::setRadius(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:899:6
  t23.method("setRadius", static_cast<void (SimTK::ContactGeometry::Sphere::*)(SimTK::Real) >(&SimTK::ContactGeometry::Sphere::setRadius));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::Sphere::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::Sphere::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:902:13
  t23.method("SimTK!ContactGeometry!Sphere!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Sphere::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::Sphere & SimTK::ContactGeometry::Sphere::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::Sphere & SimTK::ContactGeometry::Sphere::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:905:22
  t23.method("SimTK!ContactGeometry!Sphere!getAs", static_cast<const SimTK::ContactGeometry::Sphere & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Sphere::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::Sphere & SimTK::ContactGeometry::Sphere::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::Sphere & SimTK::ContactGeometry::Sphere::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:908:16
  t23.method("SimTK!ContactGeometry!Sphere!updAs", static_cast<SimTK::ContactGeometry::Sphere & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Sphere::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Sphere::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Sphere::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:912:30
  t23.method("SimTK!ContactGeometry!Sphere!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::Sphere::classTypeId));

  /* End of SimTK::ContactGeometry::Sphere class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::Ellipsoid
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Ellipsoid::Ellipsoid(const SimTK::Vec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:950:10
  t24.constructor<const SimTK::Vec3 &>();

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::ContactGeometry::Ellipsoid::getRadii() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::ContactGeometry::Ellipsoid::getRadii()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:953:13
  t24.method("getRadii", static_cast<const SimTK::Vec3 & (SimTK::ContactGeometry::Ellipsoid::*)()  const>(&SimTK::ContactGeometry::Ellipsoid::getRadii));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Ellipsoid::setRadii(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Ellipsoid::setRadii(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:959:6
  t24.method("setRadii", static_cast<void (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::Vec3 &) >(&SimTK::ContactGeometry::Ellipsoid::setRadii));

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::ContactGeometry::Ellipsoid::getCurvatures() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::ContactGeometry::Ellipsoid::getCurvatures()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:966:13
  t24.method("getCurvatures", static_cast<const SimTK::Vec3 & (SimTK::ContactGeometry::Ellipsoid::*)()  const>(&SimTK::ContactGeometry::Ellipsoid::getCurvatures));

  DEBUG_MSG("Adding wrapper for SimTK::UnitVec3 SimTK::ContactGeometry::Ellipsoid::findUnitNormalAtPoint(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::UnitVec3 SimTK::ContactGeometry::Ellipsoid::findUnitNormalAtPoint(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:980:10
  t24.method("findUnitNormalAtPoint", static_cast<SimTK::UnitVec3 (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::Ellipsoid::findUnitNormalAtPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::Ellipsoid::findPointWithThisUnitNormal(const SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::Ellipsoid::findPointWithThisUnitNormal(const SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:989:6
  t24.method("findPointWithThisUnitNormal", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::Ellipsoid::findPointWithThisUnitNormal));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::Ellipsoid::findPointInSameDirection(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::Ellipsoid::findPointInSameDirection(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:999:6
  t24.method("findPointInSameDirection", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::Vec3 &)  const>(&SimTK::ContactGeometry::Ellipsoid::findPointInSameDirection));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPoint(const SimTK::Vec3 &, SimTK::Transform &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPoint(const SimTK::Vec3 &, SimTK::Transform &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1023:6
  t24.method("findParaboloidAtPoint", static_cast<void (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::Vec3 &, SimTK::Transform &, SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPoint));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPointWithNormal(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Transform &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPointWithNormal(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Transform &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1030:6
  t24.method("findParaboloidAtPointWithNormal", static_cast<void (SimTK::ContactGeometry::Ellipsoid::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Transform &, SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::Ellipsoid::findParaboloidAtPointWithNormal));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::Ellipsoid::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::Ellipsoid::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1034:13
  t24.method("SimTK!ContactGeometry!Ellipsoid!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Ellipsoid::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::Ellipsoid & SimTK::ContactGeometry::Ellipsoid::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::Ellipsoid & SimTK::ContactGeometry::Ellipsoid::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1037:25
  t24.method("SimTK!ContactGeometry!Ellipsoid!getAs", static_cast<const SimTK::ContactGeometry::Ellipsoid & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Ellipsoid::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::Ellipsoid & SimTK::ContactGeometry::Ellipsoid::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::Ellipsoid & SimTK::ContactGeometry::Ellipsoid::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1040:19
  t24.method("SimTK!ContactGeometry!Ellipsoid!updAs", static_cast<SimTK::ContactGeometry::Ellipsoid & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Ellipsoid::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Ellipsoid::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Ellipsoid::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1044:30
  t24.method("SimTK!ContactGeometry!Ellipsoid!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::Ellipsoid::classTypeId));

  /* End of SimTK::ContactGeometry::Ellipsoid class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::SmoothHeightMap
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::SmoothHeightMap::SmoothHeightMap(const SimTK::BicubicSurface &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1072:10
  t25.constructor<const SimTK::BicubicSurface &>();

  DEBUG_MSG("Adding wrapper for const SimTK::BicubicSurface & SimTK::ContactGeometry::SmoothHeightMap::getBicubicSurface() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::BicubicSurface & SimTK::ContactGeometry::SmoothHeightMap::getBicubicSurface()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1076:23
  t25.method("getBicubicSurface", static_cast<const SimTK::BicubicSurface & (SimTK::ContactGeometry::SmoothHeightMap::*)()  const>(&SimTK::ContactGeometry::SmoothHeightMap::getBicubicSurface));

  DEBUG_MSG("Adding wrapper for const SimTK::OBBTree & SimTK::ContactGeometry::SmoothHeightMap::getOBBTree() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::OBBTree & SimTK::ContactGeometry::SmoothHeightMap::getOBBTree()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1080:16
  t25.method("getOBBTree", static_cast<const SimTK::OBBTree & (SimTK::ContactGeometry::SmoothHeightMap::*)()  const>(&SimTK::ContactGeometry::SmoothHeightMap::getOBBTree));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::SmoothHeightMap::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::SmoothHeightMap::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1083:13
  t25.method("SimTK!ContactGeometry!SmoothHeightMap!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::SmoothHeightMap::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::SmoothHeightMap & SimTK::ContactGeometry::SmoothHeightMap::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::SmoothHeightMap & SimTK::ContactGeometry::SmoothHeightMap::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1086:31
  t25.method("SimTK!ContactGeometry!SmoothHeightMap!getAs", static_cast<const SimTK::ContactGeometry::SmoothHeightMap & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::SmoothHeightMap::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::SmoothHeightMap & SimTK::ContactGeometry::SmoothHeightMap::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::SmoothHeightMap & SimTK::ContactGeometry::SmoothHeightMap::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1089:25
  t25.method("SimTK!ContactGeometry!SmoothHeightMap!updAs", static_cast<SimTK::ContactGeometry::SmoothHeightMap & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::SmoothHeightMap::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::SmoothHeightMap::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::SmoothHeightMap::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1093:30
  t25.method("SimTK!ContactGeometry!SmoothHeightMap!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::SmoothHeightMap::classTypeId));

  /* End of SimTK::ContactGeometry::SmoothHeightMap class method wrappers
   **********************************************************************/

  // obbtree.method("SimTK!OBBTree!getRoot", static_cast<const OBBNode & (*)() const>(&SimTK::OBBTree::getRoot));
  // obbtree.method("SimTK!OBBTree!updRoot", static_cast<OBBNode & (*)() >(&SimTK::OBBTree::updRoot));

  // obbnode.constructor<>();
  // obbtree.method("SimTK!OBBTree!clear", static_cast<void (*)() >(&SimTK::OBBTree::clear));
  // obbtree.method("SimTK!OBBTree!isLeaf", static_cast<bool (*)() const>(&SimTK::OBBTree::isLeaf));
  // obbtree.method("SimTK!OBBTree!getNumChildren", static_cast<int (*)() const>(&SimTK::OBBTree::getNumChildren));
  // obbtree.method("SimTK!OBBTree!getChild", static_cast<const OBBNode & (*)(int) const>(&SimTK::OBBTree::getChild));
  // obbtree.method("SimTK!OBBTree!updChild", static_cast<OBBNode & (*)(int) >(&SimTK::OBBTree::updChild));

  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::Brick
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Brick::Brick(const SimTK::Vec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1110:10
  t27.constructor<const SimTK::Vec3 &>();

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::ContactGeometry::Brick::getHalfLengths() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::ContactGeometry::Brick::getHalfLengths()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1114:13
  t27.method("getHalfLengths", static_cast<const SimTK::Vec3 & (SimTK::ContactGeometry::Brick::*)()  const>(&SimTK::ContactGeometry::Brick::getHalfLengths));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Brick::setHalfLengths(const SimTK::Vec3 &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Brick::setHalfLengths(const SimTK::Vec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1116:6
  t27.method("setHalfLengths", static_cast<void (SimTK::ContactGeometry::Brick::*)(const SimTK::Vec3 &) >(&SimTK::ContactGeometry::Brick::setHalfLengths));

  DEBUG_MSG("Adding wrapper for const SimTK::Geo::Box & SimTK::ContactGeometry::Brick::getGeoBox() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Geo::Box & SimTK::ContactGeometry::Brick::getGeoBox()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1119:17
  t27.method("getGeoBox", static_cast<const SimTK::Geo::Box & (SimTK::ContactGeometry::Brick::*)()  const>(&SimTK::ContactGeometry::Brick::getGeoBox));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::Brick::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::Brick::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1122:13
  t27.method("SimTK!ContactGeometry!Brick!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Brick::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::Brick & SimTK::ContactGeometry::Brick::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::Brick & SimTK::ContactGeometry::Brick::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1125:21
  t27.method("SimTK!ContactGeometry!Brick!getAs", static_cast<const SimTK::ContactGeometry::Brick & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Brick::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::Brick & SimTK::ContactGeometry::Brick::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::Brick & SimTK::ContactGeometry::Brick::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1128:15
  t27.method("SimTK!ContactGeometry!Brick!updAs", static_cast<SimTK::ContactGeometry::Brick & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Brick::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Brick::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Brick::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1132:30
  t27.method("SimTK!ContactGeometry!Brick!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::Brick::classTypeId));

  /* End of SimTK::ContactGeometry::Brick class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::TriangleMesh
   */


  // DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::TriangleMesh::TriangleMesh(const SimTK::ArrayViewConst_<SimTK::Vec3> &, const SimTK::ArrayViewConst_<int> &, bool) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1177:1
  // t28.constructor<const SimTK::ArrayViewConst_<SimTK::Vec3> &, const SimTK::ArrayViewConst_<int> &>();
  // t28.constructor<const SimTK::ArrayViewConst_<SimTK::Vec3> &, const SimTK::ArrayViewConst_<int> &, bool>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::TriangleMesh::TriangleMesh(const SimTK::PolygonalMesh &, bool) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1186:10
  t28.constructor<const SimTK::PolygonalMesh &>();
  t28.constructor<const SimTK::PolygonalMesh &, bool>();

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getNumEdges() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getNumEdges()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1188:5
  t28.method("getNumEdges", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::getNumEdges));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getNumFaces() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getNumFaces()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1190:5
  t28.method("getNumFaces", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::getNumFaces));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getNumVertices() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getNumVertices()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1192:5
  t28.method("getNumVertices", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::getNumVertices));

  DEBUG_MSG("Adding wrapper for const SimTK::Vec3 & SimTK::ContactGeometry::TriangleMesh::getVertexPosition(int) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Vec3 & SimTK::ContactGeometry::TriangleMesh::getVertexPosition(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1196:13
  t28.method("getVertexPosition", static_cast<const SimTK::Vec3 & (SimTK::ContactGeometry::TriangleMesh::*)(int)  const>(&SimTK::ContactGeometry::TriangleMesh::getVertexPosition));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getFaceEdge(int, int) (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getFaceEdge(int, int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1202:5
  t28.method("getFaceEdge", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)(int, int)  const>(&SimTK::ContactGeometry::TriangleMesh::getFaceEdge));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getFaceVertex(int, int) (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getFaceVertex(int, int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1207:5
  t28.method("getFaceVertex", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)(int, int)  const>(&SimTK::ContactGeometry::TriangleMesh::getFaceVertex));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getEdgeFace(int, int) (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getEdgeFace(int, int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1212:5
  t28.method("getEdgeFace", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)(int, int)  const>(&SimTK::ContactGeometry::TriangleMesh::getEdgeFace));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::getEdgeVertex(int, int) (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::getEdgeVertex(int, int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1217:5
  t28.method("getEdgeVertex", static_cast<int (SimTK::ContactGeometry::TriangleMesh::*)(int, int)  const>(&SimTK::ContactGeometry::TriangleMesh::getEdgeVertex));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::TriangleMesh::findVertexEdges(int, SimTK::Array_<int> &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::TriangleMesh::findVertexEdges(int, SimTK::Array_<int> &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1222:6
  t28.method("findVertexEdges", static_cast<void (SimTK::ContactGeometry::TriangleMesh::*)(int, SimTK::Array_<int> &)  const>(&SimTK::ContactGeometry::TriangleMesh::findVertexEdges));

  DEBUG_MSG("Adding wrapper for const SimTK::UnitVec3 & SimTK::ContactGeometry::TriangleMesh::getFaceNormal(int) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::UnitVec3 & SimTK::ContactGeometry::TriangleMesh::getFaceNormal(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1225:17
  t28.method("getFaceNormal", static_cast<const SimTK::UnitVec3 & (SimTK::ContactGeometry::TriangleMesh::*)(int)  const>(&SimTK::ContactGeometry::TriangleMesh::getFaceNormal));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::TriangleMesh::getFaceArea(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::TriangleMesh::getFaceArea(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1228:6
  t28.method("getFaceArea", static_cast<SimTK::Real (SimTK::ContactGeometry::TriangleMesh::*)(int)  const>(&SimTK::ContactGeometry::TriangleMesh::getFaceArea));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findPoint(int, const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findPoint(int, const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1234:6
  t28.method("findPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::TriangleMesh::*)(int, const SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::TriangleMesh::findPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findCentroid(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findCentroid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1239:6
  t28.method("findCentroid", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::TriangleMesh::*)(int)  const>(&SimTK::ContactGeometry::TriangleMesh::findCentroid));

  DEBUG_MSG("Adding wrapper for SimTK::UnitVec3 SimTK::ContactGeometry::TriangleMesh::findNormalAtPoint(int, const SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::UnitVec3 SimTK::ContactGeometry::TriangleMesh::findNormalAtPoint(int, const SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1244:10
  t28.method("findNormalAtPoint", static_cast<SimTK::UnitVec3 (SimTK::ContactGeometry::TriangleMesh::*)(int, const SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::TriangleMesh::findNormalAtPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPoint(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPoint(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1255:6
  t28.method("findNearestPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::TriangleMesh::*)(const SimTK::Vec3 &, bool &, SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::TriangleMesh::findNearestPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPoint(const SimTK::Vec3 &, bool &, int &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPoint(const SimTK::Vec3 &, bool &, int &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1268:6
  t28.method("findNearestPoint", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::TriangleMesh::*)(const SimTK::Vec3 &, bool &, int &, SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::TriangleMesh::findNearestPoint));

  DEBUG_MSG("Adding wrapper for SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPointToFace(const SimTK::Vec3 &, int, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec3 SimTK::ContactGeometry::TriangleMesh::findNearestPointToFace(const SimTK::Vec3 &, int, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1279:6
  t28.method("findNearestPointToFace", static_cast<SimTK::Vec3 (SimTK::ContactGeometry::TriangleMesh::*)(const SimTK::Vec3 &, int, SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::TriangleMesh::findNearestPointToFace));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::TriangleMesh::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::TriangleMesh::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1293:6
  t28.method("intersectsRay", static_cast<bool (SimTK::ContactGeometry::TriangleMesh::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, SimTK::UnitVec3 &)  const>(&SimTK::ContactGeometry::TriangleMesh::intersectsRay));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::TriangleMesh::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, int &, SimTK::Vec2 &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::TriangleMesh::intersectsRay(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, int &, SimTK::Vec2 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1307:6
  t28.method("intersectsRay", static_cast<bool (SimTK::ContactGeometry::TriangleMesh::*)(const SimTK::Vec3 &, const SimTK::UnitVec3 &, SimTK::Real &, int &, SimTK::Vec2 &)  const>(&SimTK::ContactGeometry::TriangleMesh::intersectsRay));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::getOBBTreeNode() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::getOBBTreeNode()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1310:13
  t28.method("getOBBTreeNode", static_cast<SimTK::ContactGeometry::TriangleMesh::OBBTreeNode (SimTK::ContactGeometry::TriangleMesh::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::getOBBTreeNode));

  DEBUG_MSG("Adding wrapper for SimTK::PolygonalMesh SimTK::ContactGeometry::TriangleMesh::createPolygonalMesh() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::PolygonalMesh SimTK::ContactGeometry::TriangleMesh::createPolygonalMesh()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1314:15
  t28.method("createPolygonalMesh", static_cast<SimTK::PolygonalMesh (SimTK::ContactGeometry::TriangleMesh::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::createPolygonalMesh));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::TriangleMesh::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::TriangleMesh::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1317:13
  t28.method("SimTK!ContactGeometry!TriangleMesh!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::TriangleMesh::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::TriangleMesh & SimTK::ContactGeometry::TriangleMesh::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::TriangleMesh & SimTK::ContactGeometry::TriangleMesh::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1320:28
  t28.method("SimTK!ContactGeometry!TriangleMesh!getAs", static_cast<const SimTK::ContactGeometry::TriangleMesh & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::TriangleMesh::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::TriangleMesh & SimTK::ContactGeometry::TriangleMesh::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::TriangleMesh & SimTK::ContactGeometry::TriangleMesh::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1323:22
  t28.method("SimTK!ContactGeometry!TriangleMesh!updAs", static_cast<SimTK::ContactGeometry::TriangleMesh & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::TriangleMesh::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::TriangleMesh::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::TriangleMesh::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1327:30
  t28.method("SimTK!ContactGeometry!TriangleMesh!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::TriangleMesh::classTypeId));

  /* End of SimTK::ContactGeometry::TriangleMesh class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::TriangleMesh::OBBTreeNode
   */


  // DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::OBBTreeNode(const SimTK::OBBTreeNodeImpl &) (" __HERE__ ")");
  // // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1345:1
  // t30.constructor<const SimTK::OBBTreeNodeImpl &>();

  DEBUG_MSG("Adding wrapper for const SimTK::OrientedBoundingBox & SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getBounds() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::OrientedBoundingBox & SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getBounds()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1348:28
  t30.method("getBounds", static_cast<const SimTK::OrientedBoundingBox & (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getBounds));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::isLeafNode() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::isLeafNode()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1350:6
  t30.method("isLeafNode", static_cast<bool (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::isLeafNode));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getFirstChildNode() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getFirstChildNode()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1353:19
  t30.method("getFirstChildNode", static_cast<const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getFirstChildNode));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getSecondChildNode() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getSecondChildNode()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1356:19
  t30.method("getSecondChildNode", static_cast<const SimTK::ContactGeometry::TriangleMesh::OBBTreeNode (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getSecondChildNode));

  DEBUG_MSG("Adding wrapper for const SimTK::Array_<int> & SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getTriangles() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Array_<int> & SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getTriangles()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1359:20
  t30.method("getTriangles", static_cast<const SimTK::Array_<int> & (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getTriangles));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getNumTriangles() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getNumTriangles()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1363:5
  t30.method("getNumTriangles", static_cast<int (SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::*)()  const>(&SimTK::ContactGeometry::TriangleMesh::OBBTreeNode::getNumTriangles));

  /* End of SimTK::ContactGeometry::TriangleMesh::OBBTreeNode class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactGeometry::Torus
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Torus::Torus(SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1379:1
  t32.constructor<SimTK::Real, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::Torus::getTorusRadius() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::Torus::getTorusRadius()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1380:6
  t32.method("getTorusRadius", static_cast<SimTK::Real (SimTK::ContactGeometry::Torus::*)()  const>(&SimTK::ContactGeometry::Torus::getTorusRadius));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Torus::setTorusRadius(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Torus::setTorusRadius(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1381:6
  t32.method("setTorusRadius", static_cast<void (SimTK::ContactGeometry::Torus::*)(SimTK::Real) >(&SimTK::ContactGeometry::Torus::setTorusRadius));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactGeometry::Torus::getTubeRadius() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactGeometry::Torus::getTubeRadius()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1382:6
  t32.method("getTubeRadius", static_cast<SimTK::Real (SimTK::ContactGeometry::Torus::*)()  const>(&SimTK::ContactGeometry::Torus::getTubeRadius));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactGeometry::Torus::setTubeRadius(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactGeometry::Torus::setTubeRadius(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1383:6
  t32.method("setTubeRadius", static_cast<void (SimTK::ContactGeometry::Torus::*)(SimTK::Real) >(&SimTK::ContactGeometry::Torus::setTubeRadius));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactGeometry::Torus::isInstance(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactGeometry::Torus::isInstance(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1386:13
  t32.method("SimTK!ContactGeometry!Torus!isInstance", static_cast<bool (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Torus::isInstance));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry::Torus & SimTK::ContactGeometry::Torus::getAs(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry::Torus & SimTK::ContactGeometry::Torus::getAs(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1389:21
  t32.method("SimTK!ContactGeometry!Torus!getAs", static_cast<const SimTK::ContactGeometry::Torus & (*)(const SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Torus::getAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry::Torus & SimTK::ContactGeometry::Torus::updAs(SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry::Torus & SimTK::ContactGeometry::Torus::updAs(SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1392:15
  t32.method("SimTK!ContactGeometry!Torus!updAs", static_cast<SimTK::ContactGeometry::Torus & (*)(SimTK::ContactGeometry &) >(&SimTK::ContactGeometry::Torus::updAs));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Torus::classTypeId() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometryTypeId SimTK::ContactGeometry::Torus::classTypeId()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1396:30
  t32.method("SimTK!ContactGeometry!Torus!classTypeId", static_cast<SimTK::ContactGeometryTypeId (*)() >(&SimTK::ContactGeometry::Torus::classTypeId));

  /* End of SimTK::ContactGeometry::Torus class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::GeodHitPlaneEvent
   */


  DEBUG_MSG("Adding wrapper for void SimTK::GeodHitPlaneEvent::GeodHitPlaneEvent(const SimTK::Plane &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1447:14
  t33.constructor<const SimTK::Plane &>();

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::GeodHitPlaneEvent::getValue(const SimTK::State &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::GeodHitPlaneEvent::getValue(const SimTK::State &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1453:10
  t33.method("getValue", static_cast<SimTK::Real (SimTK::GeodHitPlaneEvent::*)(const SimTK::State &)  const>(&SimTK::GeodHitPlaneEvent::getValue));

  DEBUG_MSG("Adding wrapper for void SimTK::GeodHitPlaneEvent::handleEvent(SimTK::State &, SimTK::Real, bool &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::GeodHitPlaneEvent::handleEvent(SimTK::State &, SimTK::Real, bool &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1464:10
  t33.method("handleEvent", static_cast<void (SimTK::GeodHitPlaneEvent::*)(SimTK::State &, SimTK::Real, bool &)  const>(&SimTK::GeodHitPlaneEvent::handleEvent));

  DEBUG_MSG("Adding wrapper for void SimTK::GeodHitPlaneEvent::setPlane(const SimTK::Plane &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::GeodHitPlaneEvent::setPlane(const SimTK::Plane &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1476:10
  t33.method("setPlane", static_cast<void (SimTK::GeodHitPlaneEvent::*)(const SimTK::Plane &)  const>(&SimTK::GeodHitPlaneEvent::setPlane));

  DEBUG_MSG("Adding wrapper for const SimTK::Plane & SimTK::GeodHitPlaneEvent::getPlane() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::Plane & SimTK::GeodHitPlaneEvent::getPlane()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1480:18
  t33.method("getPlane", static_cast<const SimTK::Plane & (SimTK::GeodHitPlaneEvent::*)()  const>(&SimTK::GeodHitPlaneEvent::getPlane));

  DEBUG_MSG("Adding wrapper for const void SimTK::GeodHitPlaneEvent::setEnabled(bool) (" __HERE__ ")");
  // signature to use in the veto list: const void SimTK::GeodHitPlaneEvent::setEnabled(bool)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1484:16
  t33.method("setEnabled", reinterpret_cast<void (SimTK::GeodHitPlaneEvent::*)(bool) >(&SimTK::GeodHitPlaneEvent::setEnabled));

  DEBUG_MSG("Adding wrapper for const bool SimTK::GeodHitPlaneEvent::isEnabled() (" __HERE__ ")");
  // signature to use in the veto list: const bool SimTK::GeodHitPlaneEvent::isEnabled()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1488:16
  t33.method("isEnabled", static_cast<const bool (SimTK::GeodHitPlaneEvent::*)() >(&SimTK::GeodHitPlaneEvent::isEnabled));

  /* End of SimTK::GeodHitPlaneEvent class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::PathDecorator
   */


  DEBUG_MSG("Adding wrapper for void SimTK::PathDecorator::PathDecorator(const SimTK::Vector &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1503:5
  t34.constructor<const SimTK::Vector &, const SimTK::Vec3 &, const SimTK::Vec3 &, const SimTK::Vec3 &>();

  DEBUG_MSG("Adding wrapper for void SimTK::PathDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::PathDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1506:18
  t34.method("generateDecorations", static_cast<void (SimTK::PathDecorator::*)(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) >(&SimTK::PathDecorator::generateDecorations));

  /* End of SimTK::PathDecorator class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::PlaneDecorator
   */


  DEBUG_MSG("Adding wrapper for void SimTK::PlaneDecorator::PlaneDecorator(const SimTK::Plane &, const SimTK::Vec3 &) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1543:5
  t35.constructor<const SimTK::Plane &, const SimTK::Vec3 &>();

  DEBUG_MSG("Adding wrapper for void SimTK::PlaneDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::PlaneDecorator::generateDecorations(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:1546:18
  t35.method("generateDecorations", static_cast<void (SimTK::PlaneDecorator::*)(const SimTK::State &, SimTK::Array_<SimTK::DecorativeGeometry> &) >(&SimTK::PlaneDecorator::generateDecorations));

  /* End of SimTK::PlaneDecorator class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker
   */


  // DEBUG_MSG("Adding wrapper for const std::pair<SimTK::ContactGeometryTypeId,SimTK::ContactGeometryTypeId> & SimTK::ContactTracker::getContactGeometryTypeIds() (" __HERE__ ")");
  // // signature to use in the veto list: const std::pair<SimTK::ContactGeometryTypeId,SimTK::ContactGeometryTypeId> & SimTK::ContactTracker::getContactGeometryTypeIds()
  // // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:85:1
  // t36.method("getContactGeometryTypeIds", static_cast<const std::pair<SimTK::ContactGeometryTypeId,SimTK::ContactGeometryTypeId> & (SimTK::ContactTracker::*)()  const>(&SimTK::ContactTracker::getContactGeometryTypeIds));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:94:14
  t36.method("trackContact", static_cast<bool (SimTK::ContactTracker::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::trackContact));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::refineImplicitPair(const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::Transform &, SimTK::Real, SimTK::Real &, int &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::refineImplicitPair(const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::Transform &, SimTK::Real, SimTK::Real &, int &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:129:13
  t36.method("SimTK!ContactTracker!refineImplicitPair", static_cast<bool (*)(const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::ContactGeometry &, SimTK::Vec3 &, const SimTK::Transform &, SimTK::Real, SimTK::Real &, int &) >(&SimTK::ContactTracker::refineImplicitPair));

  DEBUG_MSG("Adding wrapper for SimTK::Vec6 SimTK::ContactTracker::findImplicitPairError(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Vec6 SimTK::ContactTracker::findImplicitPairError(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:136:13
  t36.method("SimTK!ContactTracker!findImplicitPairError", static_cast<SimTK::Vec6 (*)(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &) >(&SimTK::ContactTracker::findImplicitPairError));

  DEBUG_MSG("Adding wrapper for SimTK::Mat66 SimTK::ContactTracker::calcImplicitPairJacobian(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &, const SimTK::Vec6 &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Mat66 SimTK::ContactTracker::calcImplicitPairJacobian(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &, const SimTK::Vec6 &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:145:14
  t36.method("SimTK!ContactTracker!calcImplicitPairJacobian", static_cast<SimTK::Mat66 (*)(const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::ContactGeometry &, const SimTK::Vec3 &, const SimTK::Transform &, const SimTK::Vec6 &) >(&SimTK::ContactTracker::calcImplicitPairJacobian));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::estimateConvexImplicitPairContactUsingMPR(const SimTK::ContactGeometry &, const SimTK::ContactGeometry &, const SimTK::Transform &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::UnitVec3 &, int &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::estimateConvexImplicitPairContactUsingMPR(const SimTK::ContactGeometry &, const SimTK::ContactGeometry &, const SimTK::Transform &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::UnitVec3 &, int &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:160:13
  t36.method("SimTK!ContactTracker!estimateConvexImplicitPairContactUsingMPR", static_cast<bool (*)(const SimTK::ContactGeometry &, const SimTK::ContactGeometry &, const SimTK::Transform &, SimTK::Vec3 &, SimTK::Vec3 &, SimTK::UnitVec3 &, int &) >(&SimTK::ContactTracker::estimateConvexImplicitPairContactUsingMPR));

  /* End of SimTK::ContactTracker class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::HalfSpaceSphere
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::HalfSpaceSphere::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::HalfSpaceSphere::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:188:6
  t38.method("trackContact", static_cast<bool (SimTK::ContactTracker::HalfSpaceSphere::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::HalfSpaceSphere::trackContact));

  /* End of SimTK::ContactTracker::HalfSpaceSphere class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::HalfSpaceEllipsoid
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::HalfSpaceEllipsoid::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::HalfSpaceEllipsoid::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:212:6
  t39.method("trackContact", static_cast<bool (SimTK::ContactTracker::HalfSpaceEllipsoid::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::HalfSpaceEllipsoid::trackContact));

  /* End of SimTK::ContactTracker::HalfSpaceEllipsoid class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::HalfSpaceBrick
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::HalfSpaceBrick::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::HalfSpaceBrick::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:236:6
  t40.method("trackContact", static_cast<bool (SimTK::ContactTracker::HalfSpaceBrick::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::HalfSpaceBrick::trackContact));

  /* End of SimTK::ContactTracker::HalfSpaceBrick class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::SphereSphere
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::SphereSphere::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::SphereSphere::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:260:6
  t41.method("trackContact", static_cast<bool (SimTK::ContactTracker::SphereSphere::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::SphereSphere::trackContact));

  /* End of SimTK::ContactTracker::SphereSphere class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::HalfSpaceTriangleMesh
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::HalfSpaceTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::HalfSpaceTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:284:6
  t42.method("trackContact", static_cast<bool (SimTK::ContactTracker::HalfSpaceTriangleMesh::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::HalfSpaceTriangleMesh::trackContact));

  /* End of SimTK::ContactTracker::HalfSpaceTriangleMesh class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::SphereTriangleMesh
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::SphereTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::SphereTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:316:6
  t43.method("trackContact", static_cast<bool (SimTK::ContactTracker::SphereTriangleMesh::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::SphereTriangleMesh::trackContact));

  /* End of SimTK::ContactTracker::SphereTriangleMesh class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::TriangleMeshTriangleMesh
   */

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::TriangleMeshTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::TriangleMeshTriangleMesh::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:347:6
  t44.method("trackContact", static_cast<bool (SimTK::ContactTracker::TriangleMeshTriangleMesh::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::TriangleMeshTriangleMesh::trackContact));

  /* End of SimTK::ContactTracker::TriangleMeshTriangleMesh class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::HalfSpaceConvexImplicit
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTracker::HalfSpaceConvexImplicit::HalfSpaceConvexImplicit(SimTK::ContactGeometryTypeId) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:393:10
  t45.constructor<SimTK::ContactGeometryTypeId>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::HalfSpaceConvexImplicit::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::HalfSpaceConvexImplicit::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:398:6
  t45.method("trackContact", static_cast<bool (SimTK::ContactTracker::HalfSpaceConvexImplicit::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::HalfSpaceConvexImplicit::trackContact));

  /* End of SimTK::ContactTracker::HalfSpaceConvexImplicit class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::ConvexImplicitPair
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTracker::ConvexImplicitPair::ConvexImplicitPair(SimTK::ContactGeometryTypeId, SimTK::ContactGeometryTypeId) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:418:1
  t46.constructor<SimTK::ContactGeometryTypeId, SimTK::ContactGeometryTypeId>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::ConvexImplicitPair::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::ConvexImplicitPair::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:421:6
  t46.method("trackContact", static_cast<bool (SimTK::ContactTracker::ConvexImplicitPair::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::ConvexImplicitPair::trackContact));

  /* End of SimTK::ContactTracker::ConvexImplicitPair class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactTracker::GeneralImplicitPair
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactTracker::GeneralImplicitPair::GeneralImplicitPair(SimTK::ContactGeometryTypeId, SimTK::ContactGeometryTypeId) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:445:1
  t47.constructor<SimTK::ContactGeometryTypeId, SimTK::ContactGeometryTypeId>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactTracker::GeneralImplicitPair::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactTracker::GeneralImplicitPair::trackContact(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactTracker.h:448:6
  t47.method("trackContact", static_cast<bool (SimTK::ContactTracker::GeneralImplicitPair::*)(const SimTK::Contact &, const SimTK::Transform &, const SimTK::ContactGeometry &, const SimTK::Transform &, const SimTK::ContactGeometry &, SimTK::Real, SimTK::Contact &)  const>(&SimTK::ContactTracker::GeneralImplicitPair::trackContact));

  /* End of SimTK::ContactTracker::GeneralImplicitPair class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactCliqueId
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<long long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(unsigned int) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<unsigned int>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(unsigned long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<unsigned long>();


  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::ContactCliqueId(unsigned long long) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:32
  t48.constructor<unsigned long long>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("isValid", static_cast<bool (SimTK::ContactCliqueId::*)()  const>(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValidExtended() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValidExtended()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("isValidExtended", static_cast<bool (SimTK::ContactCliqueId::*)()  const>(&SimTK::ContactCliqueId::isValidExtended));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::invalidate() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactCliqueId::invalidate()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("invalidate", static_cast<void (SimTK::ContactCliqueId::*)() >(&SimTK::ContactCliqueId::invalidate));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactCliqueId::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactCliqueId::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("clear", static_cast<void (SimTK::ContactCliqueId::*)() >(&SimTK::ContactCliqueId::clear));
  types.set_override_module(jl_base_module);

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(const SimTK::ContactCliqueId &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(const SimTK::ContactCliqueId &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(const SimTK::ContactCliqueId &)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned short)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator==(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator==(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("==", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator==));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator!=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator!=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("!=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator!=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned short)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator<));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned short)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator>=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned short)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator>(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator>(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method(">", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator>));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(int)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(short)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(long)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(long long)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned int)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned short)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long)  const>(&SimTK::ContactCliqueId::operator<=));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::operator<=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::operator<=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("<=", static_cast<bool (SimTK::ContactCliqueId::*)(unsigned long long)  const>(&SimTK::ContactCliqueId::operator<=));
  types.unset_override_module();

  DEBUG_MSG("Adding wrapper for const SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator++() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator++()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("inc!", static_cast<const SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)() >(&SimTK::ContactCliqueId::operator++));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId SimTK::ContactCliqueId::operator++(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId SimTK::ContactCliqueId::operator++(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("inc!", static_cast<SimTK::ContactCliqueId (SimTK::ContactCliqueId::*)(int) >(&SimTK::ContactCliqueId::operator++));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator--() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator--()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("dec!", static_cast<const SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)() >(&SimTK::ContactCliqueId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId SimTK::ContactCliqueId::operator--(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId SimTK::ContactCliqueId::operator--(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("dec!", static_cast<SimTK::ContactCliqueId (SimTK::ContactCliqueId::*)(int) >(&SimTK::ContactCliqueId::operator--));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId SimTK::ContactCliqueId::next() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId SimTK::ContactCliqueId::next()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("next", static_cast<SimTK::ContactCliqueId (SimTK::ContactCliqueId::*)()  const>(&SimTK::ContactCliqueId::next));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId SimTK::ContactCliqueId::prev() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId SimTK::ContactCliqueId::prev()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("prev", static_cast<SimTK::ContactCliqueId (SimTK::ContactCliqueId::*)()  const>(&SimTK::ContactCliqueId::prev));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(int) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(int) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(short) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(short) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(long) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(long) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(long long) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(long long) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned int) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned int) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned short) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned short) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned long) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned long) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator+=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("add!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned long long) >(&SimTK::ContactCliqueId::operator+=));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId & SimTK::ContactCliqueId::operator-=(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("sub!", static_cast<SimTK::ContactCliqueId & (SimTK::ContactCliqueId::*)(unsigned long long) >(&SimTK::ContactCliqueId::operator-=));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactCliqueId & SimTK::ContactCliqueId::Invalid() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactCliqueId & SimTK::ContactCliqueId::Invalid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!Invalid", static_cast<const SimTK::ContactCliqueId & (*)() >(&SimTK::ContactCliqueId::Invalid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(int) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(short) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(long) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(long long) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(unsigned int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(unsigned int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(unsigned int) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(unsigned short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(unsigned short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(unsigned short) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(unsigned long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(unsigned long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(unsigned long) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValid(unsigned long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValid(unsigned long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValid", static_cast<bool (*)(unsigned long long) >(&SimTK::ContactCliqueId::isValid));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValidExtended(int) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValidExtended(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValidExtended", static_cast<bool (*)(int) >(&SimTK::ContactCliqueId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValidExtended(short) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValidExtended(short)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValidExtended", static_cast<bool (*)(short) >(&SimTK::ContactCliqueId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValidExtended(long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValidExtended(long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValidExtended", static_cast<bool (*)(long) >(&SimTK::ContactCliqueId::isValidExtended));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactCliqueId::isValidExtended(long long) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactCliqueId::isValidExtended(long long)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!isValidExtended", static_cast<bool (*)(long long) >(&SimTK::ContactCliqueId::isValidExtended));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId::size_type SimTK::ContactCliqueId::max_size() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId::size_type SimTK::ContactCliqueId::max_size()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  t48.method("SimTK!ContactCliqueId!max_size", static_cast<SimTK::ContactCliqueId::size_type (*)() >(&SimTK::ContactCliqueId::max_size));

  /* End of SimTK::ContactCliqueId class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactMaterial
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactMaterial::ContactMaterial(SimTK::Real, SimTK::Real, SimTK::Real, SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:136:1
  t49.constructor<SimTK::Real, SimTK::Real, SimTK::Real, SimTK::Real>();
  t49.constructor<SimTK::Real, SimTK::Real, SimTK::Real, SimTK::Real, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactMaterial::isValid() (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactMaterial::isValid()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:146:6
  t49.method("isValid", static_cast<bool (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::isValid));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getStiffness() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getStiffness()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:149:6
  t49.method("getStiffness", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getStiffness));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getStiffness23() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getStiffness23()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:154:6
  t49.method("getStiffness23", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getStiffness23));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getDissipation() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getDissipation()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:159:6
  t49.method("getDissipation", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getDissipation));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getStaticFriction() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getStaticFriction()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:164:6
  t49.method("getStaticFriction", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getStaticFriction));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getDynamicFriction() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getDynamicFriction()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:169:6
  t49.method("getDynamicFriction", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getDynamicFriction));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::getViscousFriction() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::getViscousFriction()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:174:6
  t49.method("getViscousFriction", static_cast<SimTK::Real (SimTK::ContactMaterial::*)()  const>(&SimTK::ContactMaterial::getViscousFriction));

  DEBUG_MSG("Adding wrapper for SimTK::ContactMaterial & SimTK::ContactMaterial::setStiffness(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactMaterial & SimTK::ContactMaterial::setStiffness(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:182:18
  t49.method("setStiffness", static_cast<SimTK::ContactMaterial & (SimTK::ContactMaterial::*)(SimTK::Real) >(&SimTK::ContactMaterial::setStiffness));

  DEBUG_MSG("Adding wrapper for SimTK::ContactMaterial & SimTK::ContactMaterial::setDissipation(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactMaterial & SimTK::ContactMaterial::setDissipation(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:193:18
  t49.method("setDissipation", static_cast<SimTK::ContactMaterial & (SimTK::ContactMaterial::*)(SimTK::Real) >(&SimTK::ContactMaterial::setDissipation));

  DEBUG_MSG("Adding wrapper for SimTK::ContactMaterial & SimTK::ContactMaterial::setFriction(SimTK::Real, SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactMaterial & SimTK::ContactMaterial::setFriction(SimTK::Real, SimTK::Real, SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:201:18
  t49.method("setFriction", static_cast<SimTK::ContactMaterial & (SimTK::ContactMaterial::*)(SimTK::Real, SimTK::Real, SimTK::Real) >(&SimTK::ContactMaterial::setFriction));
  t49.method("setFriction", [](SimTK::ContactMaterial& a, SimTK::Real arg0, SimTK::Real arg1) -> SimTK::ContactMaterial & { return a.setFriction(arg0, arg1); });
  t49.method("setFriction", [](SimTK::ContactMaterial* a, SimTK::Real arg0, SimTK::Real arg1) -> SimTK::ContactMaterial & { return a->setFriction(arg0, arg1); });

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::calcPlaneStrainStiffness(SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::calcPlaneStrainStiffness(SimTK::Real, SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:229:13
  t49.method("SimTK!ContactMaterial!calcPlaneStrainStiffness", static_cast<SimTK::Real (*)(SimTK::Real, SimTK::Real) >(&SimTK::ContactMaterial::calcPlaneStrainStiffness));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::calcConfinedCompressionStiffness(SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::calcConfinedCompressionStiffness(SimTK::Real, SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:250:13
  t49.method("SimTK!ContactMaterial!calcConfinedCompressionStiffness", static_cast<SimTK::Real (*)(SimTK::Real, SimTK::Real) >(&SimTK::ContactMaterial::calcConfinedCompressionStiffness));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactMaterial::calcDissipationFromObservedRestitution(SimTK::Real, SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactMaterial::calcDissipationFromObservedRestitution(SimTK::Real, SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:274:13
  t49.method("SimTK!ContactMaterial!calcDissipationFromObservedRestitution", static_cast<SimTK::Real (*)(SimTK::Real, SimTK::Real) >(&SimTK::ContactMaterial::calcDissipationFromObservedRestitution));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactMaterial::clear() (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactMaterial::clear()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:287:6
  t49.method("clear", static_cast<void (SimTK::ContactMaterial::*)() >(&SimTK::ContactMaterial::clear));

  /* End of SimTK::ContactMaterial class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class SimTK::ContactSurface
   */


  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurface::ContactSurface(const SimTK::ContactGeometry &, const SimTK::ContactMaterial &, SimTK::Real) (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:347:1
  t50.constructor<const SimTK::ContactGeometry &, const SimTK::ContactMaterial &>();
  t50.constructor<const SimTK::ContactGeometry &, const SimTK::ContactMaterial &, SimTK::Real>();

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::setShape(const SimTK::ContactGeometry &) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::setShape(const SimTK::ContactGeometry &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:357:17
  t50.method("setShape", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(const SimTK::ContactGeometry &) >(&SimTK::ContactSurface::setShape));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::setMaterial(const SimTK::ContactMaterial &, SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::setMaterial(const SimTK::ContactMaterial &, SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:362:17
  t50.method("setMaterial", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(const SimTK::ContactMaterial &, SimTK::Real) >(&SimTK::ContactSurface::setMaterial));
  t50.method("setMaterial", [](SimTK::ContactSurface& a, const SimTK::ContactMaterial & arg0) -> SimTK::ContactSurface & { return a.setMaterial(arg0); });
  t50.method("setMaterial", [](SimTK::ContactSurface* a, const SimTK::ContactMaterial & arg0) -> SimTK::ContactSurface & { return a->setMaterial(arg0); });

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::setThickness(SimTK::Real) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::setThickness(SimTK::Real)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:370:17
  t50.method("setThickness", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(SimTK::Real) >(&SimTK::ContactSurface::setThickness));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactGeometry & SimTK::ContactSurface::getShape() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactGeometry & SimTK::ContactSurface::getShape()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:378:24
  t50.method("getShape", static_cast<const SimTK::ContactGeometry & (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getShape));

  DEBUG_MSG("Adding wrapper for const SimTK::ContactMaterial & SimTK::ContactSurface::getMaterial() (" __HERE__ ")");
  // signature to use in the veto list: const SimTK::ContactMaterial & SimTK::ContactSurface::getMaterial()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:381:24
  t50.method("getMaterial", static_cast<const SimTK::ContactMaterial & (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getMaterial));

  DEBUG_MSG("Adding wrapper for SimTK::Real SimTK::ContactSurface::getThickness() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::Real SimTK::ContactSurface::getThickness()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:385:6
  t50.method("getThickness", static_cast<SimTK::Real (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getThickness));

  DEBUG_MSG("Adding wrapper for SimTK::ContactGeometry & SimTK::ContactSurface::updShape() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactGeometry & SimTK::ContactSurface::updShape()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:388:18
  t50.method("updShape", static_cast<SimTK::ContactGeometry & (SimTK::ContactSurface::*)() >(&SimTK::ContactSurface::updShape));

  DEBUG_MSG("Adding wrapper for SimTK::ContactMaterial & SimTK::ContactSurface::updMaterial() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactMaterial & SimTK::ContactSurface::updMaterial()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:391:18
  t50.method("updMaterial", static_cast<SimTK::ContactMaterial & (SimTK::ContactSurface::*)() >(&SimTK::ContactSurface::updMaterial));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::joinClique(SimTK::ContactCliqueId) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::joinClique(SimTK::ContactCliqueId)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:395:17
  t50.method("joinClique", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(SimTK::ContactCliqueId) >(&SimTK::ContactSurface::joinClique));

  DEBUG_MSG("Adding wrapper for void SimTK::ContactSurface::leaveClique(SimTK::ContactCliqueId) (" __HERE__ ")");
  // signature to use in the veto list: void SimTK::ContactSurface::leaveClique(SimTK::ContactCliqueId)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:411:6
  t50.method("leaveClique", static_cast<void (SimTK::ContactSurface::*)(SimTK::ContactCliqueId) >(&SimTK::ContactSurface::leaveClique));

  DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurface::isInSameClique(const SimTK::ContactSurface &) (" __HERE__ ")");
  // signature to use in the veto list: bool SimTK::ContactSurface::isInSameClique(const SimTK::ContactSurface &)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:422:6
  t50.method("isInSameClique", static_cast<bool (SimTK::ContactSurface::*)(const SimTK::ContactSurface &)  const>(&SimTK::ContactSurface::isInSameClique));

  // DEBUG_MSG("Adding wrapper for const SimTK::Array_<SimTK::ContactCliqueId,short> & SimTK::ContactSurface::getCliques() (" __HERE__ ")");
  // // signature to use in the veto list: const SimTK::Array_<SimTK::ContactCliqueId,short> & SimTK::ContactSurface::getCliques()
  // // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:428:38
  // t50.method("getCliques", static_cast<const SimTK::Array_<SimTK::ContactCliqueId,short> & (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getCliques));

  // DEBUG_MSG("Adding wrapper for bool SimTK::ContactSurface::cliquesIntersect(const SimTK::Array_<SimTK::ContactCliqueId,short> &, const SimTK::Array_<SimTK::ContactCliqueId,short> &) (" __HERE__ ")");
  // // signature to use in the veto list: bool SimTK::ContactSurface::cliquesIntersect(const SimTK::Array_<SimTK::ContactCliqueId,short> &, const SimTK::Array_<SimTK::ContactCliqueId,short> &)
  // // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:433:13
  // t50.method("SimTK!ContactSurface!cliquesIntersect", static_cast<bool (*)(const SimTK::Array_<SimTK::ContactCliqueId,short> &, const SimTK::Array_<SimTK::ContactCliqueId,short> &) >(&SimTK::ContactSurface::cliquesIntersect));

  DEBUG_MSG("Adding wrapper for SimTK::ContactCliqueId SimTK::ContactSurface::createNewContactClique() (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactCliqueId SimTK::ContactSurface::createNewContactClique()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:456:24
  t50.method("SimTK!ContactSurface!createNewContactClique", static_cast<SimTK::ContactCliqueId (*)() >(&SimTK::ContactSurface::createNewContactClique));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::setIndexOnBody(int) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::setIndexOnBody(int)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:471:17
  t50.method("setIndexOnBody", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(int) >(&SimTK::ContactSurface::setIndexOnBody));

  DEBUG_MSG("Adding wrapper for SimTK::ContactSurface & SimTK::ContactSurface::setUserRef(void *) (" __HERE__ ")");
  // signature to use in the veto list: SimTK::ContactSurface & SimTK::ContactSurface::setUserRef(void *)
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:487:17
  t50.method("setUserRef", static_cast<SimTK::ContactSurface & (SimTK::ContactSurface::*)(void *) >(&SimTK::ContactSurface::setUserRef));

  DEBUG_MSG("Adding wrapper for int SimTK::ContactSurface::getIndexOnBody() (" __HERE__ ")");
  // signature to use in the veto list: int SimTK::ContactSurface::getIndexOnBody()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:493:5
  t50.method("getIndexOnBody", static_cast<int (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getIndexOnBody));

  DEBUG_MSG("Adding wrapper for void * SimTK::ContactSurface::getUserRef() (" __HERE__ ")");
  // signature to use in the veto list: void * SimTK::ContactSurface::getUserRef()
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:499:7
  t50.method("getUserRef", static_cast<void * (SimTK::ContactSurface::*)()  const>(&SimTK::ContactSurface::getUserRef));

  /* End of SimTK::ContactSurface class method wrappers
   **********************************************************************/

  array_wrapper.template apply<SimTK::Contact>();

  /**********************************************************************
   * Wrappers for global functions and variables including
   * class static members
   */

  DEBUG_MSG("Adding SimTK!InvalidContactSurfaceIndex methods to provide access to the global variable SimTK::InvalidContactSurfaceIndex (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:39:1
  types.method("SimTK!InvalidContactSurfaceIndex", []()-> const SimTK::ContactSurfaceIndex& { return SimTK::InvalidContactSurfaceIndex; });

  DEBUG_MSG("Adding SimTK!InvalidContactId methods to provide access to the global variable SimTK::InvalidContactId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:50:1
  types.method("SimTK!InvalidContactId", []()-> const SimTK::ContactId& { return SimTK::InvalidContactId; });

  DEBUG_MSG("Adding SimTK!InvalidContactTypeId methods to provide access to the global variable SimTK::InvalidContactTypeId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/Contact.h:58:1
  types.method("SimTK!InvalidContactTypeId", []()-> const SimTK::ContactTypeId& { return SimTK::InvalidContactTypeId; });

  DEBUG_MSG("Adding SimTK!InvalidContactGeometryTypeId methods to provide access to the global variable SimTK::InvalidContactGeometryTypeId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simmath/internal/ContactGeometry.h:44:1
  types.method("SimTK!InvalidContactGeometryTypeId", []()-> const SimTK::ContactGeometryTypeId& { return SimTK::InvalidContactGeometryTypeId; });

  DEBUG_MSG("Adding SimTK!InvalidContactCliqueId methods to provide access to the global variable SimTK::InvalidContactCliqueId (" __HERE__ ")");
  // defined in /opt/opensim-core-fullrelease/sdk/include/simbody/simbody/internal/ContactSurface.h:40:1
  types.method("SimTK!InvalidContactCliqueId", []()-> const SimTK::ContactCliqueId& { return SimTK::InvalidContactCliqueId; });

  /* End of global function wrappers
   **********************************************************************/

  DEBUG_MSG("End of wrapper definitions");

}
}
