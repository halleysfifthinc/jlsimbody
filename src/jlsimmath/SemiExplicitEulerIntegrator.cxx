// this file was auto-generated by wrapit v1.3.3
#include "jlsimbody/common.h"

#include "jlsimmath/Timestepper_and_Integrators.h"

namespace jlcxx {
  template<> struct IsMirroredType<SimTK::SemiExplicitEulerIntegrator> : std::false_type { };
  template<> struct DefaultConstructible<SimTK::SemiExplicitEulerIntegrator> : std::false_type { };
  template<> struct SuperType<SimTK::SemiExplicitEulerIntegrator> { typedef SimTK::Integrator type; };
}

namespace jlsimbody {

// Class generating the wrapper for type SimTK::SemiExplicitEulerIntegrator
struct JLSIMBODY_NO_EXPORT JlSimTK_SemiExplicitEulerIntegrator : public Wrapper {

  JlSimTK_SemiExplicitEulerIntegrator(jlcxx::Module& module): Wrapper(module){
    DEBUG_MSG("type SimTK::SemiExplicitEulerIntegrator (" __HERE__ ")");
    // defined in simbody/simmath/SemiExplicitEulerIntegrator.h:98:28
    jlcxx::TypeWrapper<SimTK::SemiExplicitEulerIntegrator>  t = module.add_type<SimTK::SemiExplicitEulerIntegrator>("SemiExplicitEulerIntegrator",
      jlcxx::julia_base_type<SimTK::Integrator>());
    CLEAR_DEBUG_MSG();

    type_ = std::unique_ptr<jlcxx::TypeWrapper<SimTK::SemiExplicitEulerIntegrator>>(new jlcxx::TypeWrapper<SimTK::SemiExplicitEulerIntegrator>(module, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("void SimTK::SemiExplicitEulerIntegrator::SemiExplicitEulerIntegrator(const SimTK::System &, SimTK::Real) (" __HERE__ ")");
    // defined in simbody/simmath/SemiExplicitEulerIntegrator.h:102:5
    t.constructor<const SimTK::System &, SimTK::Real>();
    CLEAR_DEBUG_MSG();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<SimTK::SemiExplicitEulerIntegrator>> type_;
};
std::shared_ptr<Wrapper> newJlSimTK_SemiExplicitEulerIntegrator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlSimTK_SemiExplicitEulerIntegrator(module));
}

}
