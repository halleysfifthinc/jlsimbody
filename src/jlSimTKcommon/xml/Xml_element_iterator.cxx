// this file was auto-generated by wrapit v1.3.3
#include "jlsimbody/common.h"

#include "jlSimTKcommon/Xml.h"

namespace jlcxx {
  template<> struct IsMirroredType<SimTK::Xml::element_iterator> : std::false_type { };
  template<> struct DefaultConstructible<SimTK::Xml::element_iterator> : std::false_type { };
  template<> struct SuperType<SimTK::Xml::element_iterator> { typedef SimTK::Xml::node_iterator type; };
}

namespace jlsimbody {

// Class generating the wrapper for type SimTK::Xml::element_iterator
struct JlSimTK_Xml_element_iterator: public Wrapper {

  JlSimTK_Xml_element_iterator(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("type SimTK::Xml::element_iterator (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:973:32
    auto t = jlModule.add_type<SimTK::Xml::element_iterator>("Xmlelement_iterator",
      jlcxx::julia_base_type<SimTK::Xml::node_iterator>());
    CLEAR_DEBUG_MSG();

    type_ = std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::element_iterator>>(new jlcxx::TypeWrapper<SimTK::Xml::element_iterator>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>();

    DEBUG_MSG("void SimTK::Xml::element_iterator::element_iterator(const SimTK::String &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:978:10
    t.constructor<const SimTK::String &>();
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("void SimTK::Xml::element_iterator::element_iterator(SimTK::Xml::Element &, const SimTK::String &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:982:17
    t.constructor<SimTK::Xml::Element &, const SimTK::String &>();
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("void SimTK::Xml::element_iterator::element_iterator(const SimTK::Xml::element_iterator &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:986:1
    t.constructor<const SimTK::Xml::element_iterator &>();
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::element_iterator & SimTK::Xml::element_iterator::operator=(const SimTK::Xml::element_iterator &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:991:19
    t.method("set!", static_cast<SimTK::Xml::element_iterator & (SimTK::Xml::element_iterator::*)(const SimTK::Xml::element_iterator &) >(&SimTK::Xml::element_iterator::operator=));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::element_iterator & SimTK::Xml::element_iterator::operator++() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:994:19
    t.method("inc!", static_cast<SimTK::Xml::element_iterator & (SimTK::Xml::element_iterator::*)() >(&SimTK::Xml::element_iterator::operator++));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::element_iterator SimTK::Xml::element_iterator::operator++(int) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:995:18
    t.method("inc!", static_cast<SimTK::Xml::element_iterator (SimTK::Xml::element_iterator::*)(int) >(&SimTK::Xml::element_iterator::operator++));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::element_iterator & SimTK::Xml::element_iterator::operator--() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:996:19
    t.method("dec!", static_cast<SimTK::Xml::element_iterator & (SimTK::Xml::element_iterator::*)() >(&SimTK::Xml::element_iterator::operator--));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::element_iterator SimTK::Xml::element_iterator::operator--(int) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:997:18
    t.method("dec!", static_cast<SimTK::Xml::element_iterator (SimTK::Xml::element_iterator::*)(int) >(&SimTK::Xml::element_iterator::operator--));
    CLEAR_DEBUG_MSG();

    module_.set_override_module(jl_base_module);
    DEBUG_MSG("SimTK::Xml::Element & SimTK::Xml::element_iterator::operator*() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:998:17
    t.method("getindex", static_cast<SimTK::Xml::Element & (SimTK::Xml::element_iterator::*)()  const>(&SimTK::Xml::element_iterator::operator*));
    CLEAR_DEBUG_MSG();
    module_.unset_override_module();

    DEBUG_MSG("SimTK::Xml::Element * SimTK::Xml::element_iterator::operator->() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:999:17
    t.method("arrow", static_cast<SimTK::Xml::Element * (SimTK::Xml::element_iterator::*)()  const>(&SimTK::Xml::element_iterator::operator->));
    CLEAR_DEBUG_MSG();

    module_.set_override_module(jl_base_module);
    DEBUG_MSG("bool SimTK::Xml::element_iterator::operator==(const SimTK::Xml::element_iterator &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1001:6
    t.method("==", static_cast<bool (SimTK::Xml::element_iterator::*)(const SimTK::Xml::element_iterator &)  const>(&SimTK::Xml::element_iterator::operator==));
    CLEAR_DEBUG_MSG();
    module_.unset_override_module();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::element_iterator>> type_;
};
std::shared_ptr<Wrapper> newJlSimTK_Xml_element_iterator(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlSimTK_Xml_element_iterator(module));
}

}
