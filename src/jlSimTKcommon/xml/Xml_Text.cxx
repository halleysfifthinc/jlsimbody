// this file was auto-generated by wrapit v1.3.3
#include "jlsimbody/common.h"

#include "jlSimTKcommon/Xml.h"

namespace jlcxx {
  template<> struct IsMirroredType<SimTK::Xml::Text> : std::false_type { };
  template<> struct DefaultConstructible<SimTK::Xml::Text> : std::false_type { };
  template<> struct SuperType<SimTK::Xml::Text> { typedef SimTK::Xml::Node type; };
}

namespace jlsimbody
{

// Class generating the wrapper for type SimTK::Xml::Text
struct JlSimTK_Xml_Text: public Wrapper {

  JlSimTK_Xml_Text(jlcxx::Module& module): Wrapper(module){
    DEBUG_MSG("type SimTK::Xml::Text (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1487:32
    auto t = module.add_type<SimTK::Xml::Text>("XmlText",
      jlcxx::julia_base_type<SimTK::Xml::Node>());
    CLEAR_DEBUG_MSG();

    type_ = std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::Text>>(new jlcxx::TypeWrapper<SimTK::Xml::Text>(module, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>();

    DEBUG_MSG("void SimTK::Xml::Text::Text(const SimTK::String &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1495:10
    t.constructor<const SimTK::String &>();
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::Text SimTK::Xml::Text::clone() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1500:6
    t.method("clone", static_cast<SimTK::Xml::Text (SimTK::Xml::Text::*)()  const>(&SimTK::Xml::Text::clone));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("const SimTK::String & SimTK::Xml::Text::getText() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1504:15
    t.method("getText", static_cast<const SimTK::String & (SimTK::Xml::Text::*)()  const>(&SimTK::Xml::Text::getText));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::String & SimTK::Xml::Text::updText() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1507:9
    t.method("updText", static_cast<SimTK::String & (SimTK::Xml::Text::*)() >(&SimTK::Xml::Text::updText));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("bool SimTK::Xml::Text::isA(const SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1514:13
    module_.method("Xml!Text!isA", static_cast<bool (*)(const SimTK::Xml::Node &) >(&SimTK::Xml::Text::isA));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("const SimTK::Xml::Text & SimTK::Xml::Text::getAs(const SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1517:20
    module_.method("Xml!Text!getAs", static_cast<const SimTK::Xml::Text & (*)(const SimTK::Xml::Node &) >(&SimTK::Xml::Text::getAs));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::Text & SimTK::Xml::Text::getAs(SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:1520:14
    module_.method("Xml!Text!updAs", static_cast<SimTK::Xml::Text & (*)(SimTK::Xml::Node &) >(&SimTK::Xml::Text::getAs));
    CLEAR_DEBUG_MSG();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::Text>> type_;
};
std::shared_ptr<Wrapper> newJlSimTK_Xml_Text(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlSimTK_Xml_Text(module));
}

} // namespace jlsimbody
