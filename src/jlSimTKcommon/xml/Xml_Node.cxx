// this file was auto-generated by wrapit v1.3.3
#include "jlsimbody/common.h"

#include "jlSimTKcommon/Xml.h"

namespace jlcxx {
  template<> struct IsMirroredType<SimTK::Xml::Node> : std::false_type { };
  template<> struct DefaultConstructible<SimTK::Xml::Node> : std::false_type { };
}

namespace jlsimbody {

// Class generating the wrapper for type SimTK::Xml::Node
struct JlSimTK_Xml_Node: public Wrapper {

  JlSimTK_Xml_Node(jlcxx::Module& module): Wrapper(module){
    DEBUG_MSG("type SimTK::Xml::Node (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:747:32
    auto t = module.add_type<SimTK::Xml::Node>("XmlNode");
    CLEAR_DEBUG_MSG();

    type_ = std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::Node>>(new jlcxx::TypeWrapper<SimTK::Xml::Node>(module, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>();

    DEBUG_MSG("void SimTK::Xml::Node::Node(const SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:761:1
    t.constructor<const SimTK::Xml::Node &>();
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::Node & SimTK::Xml::Node::operator=(const SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:766:7
    t.method("set!", static_cast<SimTK::Xml::Node & (SimTK::Xml::Node::*)(const SimTK::Xml::Node &) >(&SimTK::Xml::Node::operator=));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::Node SimTK::Xml::Node::clone() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:771:6
    t.method("clone", static_cast<SimTK::Xml::Node (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::clone));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("void SimTK::Xml::Node::clear() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:779:6
    t.method("clear", static_cast<void (SimTK::Xml::Node::*)() >(&SimTK::Xml::Node::clear));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("void SimTK::Xml::Node::clearOrphan() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:783:6
    t.method("clearOrphan", static_cast<void (SimTK::Xml::Node::*)() >(&SimTK::Xml::Node::clearOrphan));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::NodeType SimTK::Xml::Node::getNodeType() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:794:10
    t.method("getNodeType", static_cast<SimTK::Xml::NodeType (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::getNodeType));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::String SimTK::Xml::Node::getNodeTypeAsString() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:797:8
    t.method("getNodeTypeAsString", static_cast<SimTK::String (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::getNodeTypeAsString));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("bool SimTK::Xml::Node::isValid() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:801:6
    t.method("isValid", static_cast<bool (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::isValid));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("bool SimTK::Xml::Node::isTopLevelNode() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:806:6
    t.method("isTopLevelNode", static_cast<bool (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::isTopLevelNode));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("bool SimTK::Xml::Node::isOrphan() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:812:6
    t.method("isOrphan", static_cast<bool (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::isOrphan));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("bool SimTK::Xml::Node::hasParentElement() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:817:6
    t.method("hasParentElement", static_cast<bool (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::hasParentElement));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("SimTK::Xml::Element SimTK::Xml::Node::getParentElement() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:821:9
    t.method("getParentElement", static_cast<SimTK::Xml::Element (SimTK::Xml::Node::*)() >(&SimTK::Xml::Node::getParentElement));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("const SimTK::String & SimTK::Xml::Node::getNodeText() (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:840:15
    t.method("getNodeText", static_cast<const SimTK::String & (SimTK::Xml::Node::*)()  const>(&SimTK::Xml::Node::getNodeText));
    CLEAR_DEBUG_MSG();

    DEBUG_MSG("void SimTK::Xml::Node::writeToString(SimTK::String &, bool) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:848:6
    t.method("writeToString", static_cast<void (SimTK::Xml::Node::*)(SimTK::String &, bool)  const>(&SimTK::Xml::Node::writeToString));
    CLEAR_DEBUG_MSG();

    module_.set_override_module(jl_base_module);
    DEBUG_MSG("bool SimTK::Xml::Node::operator==(const SimTK::Xml::Node &) (" __HERE__ ")");
    // defined in simbody/SimTKcommon/internal/Xml.h:854:6
    t.method("==", static_cast<bool (SimTK::Xml::Node::*)(const SimTK::Xml::Node &)  const>(&SimTK::Xml::Node::operator==));
    CLEAR_DEBUG_MSG();
    module_.unset_override_module();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<SimTK::Xml::Node>> type_;
};
std::shared_ptr<Wrapper> newJlSimTK_Xml_Node(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlSimTK_Xml_Node(module));
}

}
